
// -*-c++-*-
//-------------------------------------------------------------------------
//   Copyright 2002-2024 National Technology & Engineering Solutions of
//   Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
//   NTESS, the U.S. Government retains certain rights in this software.
//
//   This file is part of the Xyce(TM) Parallel Electrical Simulator.
//
//   Xyce(TM) is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   Xyce(TM) is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with Xyce(TM).
//   If not, see <http://www.gnu.org/licenses/>.
//-------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
// Purpose        :
//
// Special Notes  : Generated from verilog file bsimcmg.va with ADMS
//                  interface for Xyce 7.9.0
//                  DO NOT EDIT THIS FILE DIRECTLY!  It may be overwritten!
//
// Creator        : admsXml-2.3.7
//
// Creation Date  : Thu, 23 May 2024 20:30:06
//
//-----------------------------------------------------------------------------
#ifndef Xyce_N_DEV_ADMSbsimcmg_h
#define Xyce_N_DEV_ADMSbsimcmg_h


#include <N_DEV_Configuration.h>
#include <N_DEV_Const.h>
#include <N_DEV_DeviceBlock.h>
#include <N_DEV_DeviceInstance.h>
#include <N_DEV_DeviceModel.h>
#include <N_DEV_MOSFET1.h>


// Xyce_config.h contains a VERSION macro from autoconf, and some
// Verilog-A models like to define a variable of that name.  This can be
// a serious problem, and we don't need the VERSION macro.  Get rid of it.
// This must happen *after* all the includes of Xyce headers, each of which
// includes Xyce_config.h.  The implementation file must do this all again
// because it includes more Xyce headers *after* including this one.
#ifdef VERSION
#undef VERSION
#endif

namespace Xyce {
namespace Device {
namespace ADMSbsimcmg {

class Model;
class Instance;
class InstanceSensitivity;

#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// Class         : InstanceSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class InstanceSensitivity : public baseSensitivity
{
public:
InstanceSensitivity() :
baseSensitivity() {};

virtual ~InstanceSensitivity() {};

virtual void operator()(
const ParameterBase &entity,
const std::string &param,
std::vector<double> & dfdp,
std::vector<double> & dqdp,
std::vector<double> & dbdp,
std::vector<int> & Findices,
std::vector<int> & Qindices,
std::vector<int> & Bindices
) const ;
};

static InstanceSensitivity instSens;


//-----------------------------------------------------------------------------
// Class         : ModelSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class ModelSensitivity : public baseSensitivity
{
public:
ModelSensitivity() :
baseSensitivity() {};

virtual ~ModelSensitivity() {};

virtual void operator()(
const ParameterBase &entity,
const std::string &param,
std::vector<double> & dfdp,
std::vector<double> & dqdp,
std::vector<double> & dbdp,
std::vector<int> & Findices,
std::vector<int> & Qindices,
std::vector<int> & Bindices
) const ;
};

static ModelSensitivity modSens;
#endif // Xyce_ADMS_SENSITIVITIES

// general purpose free functions
// thermal voltage at kelvin temperature temp)
static inline double adms_vt(const double temp) {return(CONSTKoverQ*temp);};


#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// "structs" to hold instance and model param/variable copies
//-----------------------------------------------------------------------------
class instanceSensStruct
{
public:
// instance parameters
// reals
double instancePar_L;
double d_instancePar_L_dX;
bool instancePar_given_L;
double instancePar_D;
double d_instancePar_D_dX;
bool instancePar_given_D;
double instancePar_TFIN;
double d_instancePar_TFIN_dX;
bool instancePar_given_TFIN;
double instancePar_FPITCH;
double d_instancePar_FPITCH_dX;
bool instancePar_given_FPITCH;
double instancePar_NFIN;
double d_instancePar_NFIN_dX;
bool instancePar_given_NFIN;
double instancePar_ASEO;
double d_instancePar_ASEO_dX;
bool instancePar_given_ASEO;
double instancePar_ADEO;
double d_instancePar_ADEO_dX;
bool instancePar_given_ADEO;
double instancePar_PSEO;
double d_instancePar_PSEO_dX;
bool instancePar_given_PSEO;
double instancePar_PDEO;
double d_instancePar_PDEO_dX;
bool instancePar_given_PDEO;
double instancePar_ASEJ;
double d_instancePar_ASEJ_dX;
bool instancePar_given_ASEJ;
double instancePar_ADEJ;
double d_instancePar_ADEJ_dX;
bool instancePar_given_ADEJ;
double instancePar_PSEJ;
double d_instancePar_PSEJ_dX;
bool instancePar_given_PSEJ;
double instancePar_PDEJ;
double d_instancePar_PDEJ_dX;
bool instancePar_given_PDEJ;
double instancePar_COVS;
double d_instancePar_COVS_dX;
bool instancePar_given_COVS;
double instancePar_COVD;
double d_instancePar_COVD_dX;
bool instancePar_given_COVD;
double instancePar_CGSP;
double d_instancePar_CGSP_dX;
bool instancePar_given_CGSP;
double instancePar_CGDP;
double d_instancePar_CGDP_dX;
bool instancePar_given_CGDP;
double instancePar_CDSP;
double d_instancePar_CDSP_dX;
bool instancePar_given_CDSP;
double instancePar_NRS;
double d_instancePar_NRS_dX;
bool instancePar_given_NRS;
double instancePar_NRD;
double d_instancePar_NRD_dX;
bool instancePar_given_NRD;
double instancePar_LRSD;
double d_instancePar_LRSD_dX;
bool instancePar_given_LRSD;
double instancePar_DELVTRAND;
double d_instancePar_DELVTRAND_dX;
bool instancePar_given_DELVTRAND;
double instancePar_U0MULT;
double d_instancePar_U0MULT_dX;
bool instancePar_given_U0MULT;
// non-reals(including hidden)
int instancePar_NGCON;
bool instancePar_given_NGCON;
// instance variables
// reals
};

class modelSensStruct
{
public:
// model parameters
// reals
double modelPar_L;
double d_modelPar_L_dX;
bool modelPar_given_L;
double modelPar_D;
double d_modelPar_D_dX;
bool modelPar_given_D;
double modelPar_TFIN;
double d_modelPar_TFIN_dX;
bool modelPar_given_TFIN;
double modelPar_FPITCH;
double d_modelPar_FPITCH_dX;
bool modelPar_given_FPITCH;
double modelPar_NFIN;
double d_modelPar_NFIN_dX;
bool modelPar_given_NFIN;
double modelPar_ASEO;
double d_modelPar_ASEO_dX;
bool modelPar_given_ASEO;
double modelPar_ADEO;
double d_modelPar_ADEO_dX;
bool modelPar_given_ADEO;
double modelPar_PSEO;
double d_modelPar_PSEO_dX;
bool modelPar_given_PSEO;
double modelPar_PDEO;
double d_modelPar_PDEO_dX;
bool modelPar_given_PDEO;
double modelPar_ASEJ;
double d_modelPar_ASEJ_dX;
bool modelPar_given_ASEJ;
double modelPar_ADEJ;
double d_modelPar_ADEJ_dX;
bool modelPar_given_ADEJ;
double modelPar_PSEJ;
double d_modelPar_PSEJ_dX;
bool modelPar_given_PSEJ;
double modelPar_PDEJ;
double d_modelPar_PDEJ_dX;
bool modelPar_given_PDEJ;
double modelPar_COVS;
double d_modelPar_COVS_dX;
bool modelPar_given_COVS;
double modelPar_COVD;
double d_modelPar_COVD_dX;
bool modelPar_given_COVD;
double modelPar_CGSP;
double d_modelPar_CGSP_dX;
bool modelPar_given_CGSP;
double modelPar_CGDP;
double d_modelPar_CGDP_dX;
bool modelPar_given_CGDP;
double modelPar_CDSP;
double d_modelPar_CDSP_dX;
bool modelPar_given_CDSP;
double modelPar_NRS;
double d_modelPar_NRS_dX;
bool modelPar_given_NRS;
double modelPar_NRD;
double d_modelPar_NRD_dX;
bool modelPar_given_NRD;
double modelPar_LRSD;
double d_modelPar_LRSD_dX;
bool modelPar_given_LRSD;
double modelPar_XL;
double d_modelPar_XL_dX;
bool modelPar_given_XL;
double modelPar_DTEMP;
double d_modelPar_DTEMP_dX;
bool modelPar_given_DTEMP;
double modelPar_DELVTRAND;
double d_modelPar_DELVTRAND_dX;
bool modelPar_given_DELVTRAND;
double modelPar_U0MULT;
double d_modelPar_U0MULT_dX;
bool modelPar_given_U0MULT;
double modelPar_IDS0MULT;
double d_modelPar_IDS0MULT_dX;
bool modelPar_given_IDS0MULT;
double modelPar_LINT;
double d_modelPar_LINT_dX;
bool modelPar_given_LINT;
double modelPar_LL;
double d_modelPar_LL_dX;
bool modelPar_given_LL;
double modelPar_LLN;
double d_modelPar_LLN_dX;
bool modelPar_given_LLN;
double modelPar_DLC;
double d_modelPar_DLC_dX;
bool modelPar_given_DLC;
double modelPar_DLCACC;
double d_modelPar_DLCACC_dX;
bool modelPar_given_DLCACC;
double modelPar_DLBIN;
double d_modelPar_DLBIN_dX;
bool modelPar_given_DLBIN;
double modelPar_LLC;
double d_modelPar_LLC_dX;
bool modelPar_given_LLC;
double modelPar_EOT;
double d_modelPar_EOT_dX;
bool modelPar_given_EOT;
double modelPar_TOXP;
double d_modelPar_TOXP_dX;
bool modelPar_given_TOXP;
double modelPar_EOTBOX;
double d_modelPar_EOTBOX_dX;
bool modelPar_given_EOTBOX;
double modelPar_HFIN;
double d_modelPar_HFIN_dX;
bool modelPar_given_HFIN;
double modelPar_FECH;
double d_modelPar_FECH_dX;
bool modelPar_given_FECH;
double modelPar_DELTAW;
double d_modelPar_DELTAW_dX;
bool modelPar_given_DELTAW;
double modelPar_FECHCV;
double d_modelPar_FECHCV_dX;
bool modelPar_given_FECHCV;
double modelPar_DELTAWCV;
double d_modelPar_DELTAWCV_dX;
bool modelPar_given_DELTAWCV;
double modelPar_NBODY;
double d_modelPar_NBODY_dX;
bool modelPar_given_NBODY;
double modelPar_NBODYN1;
double d_modelPar_NBODYN1_dX;
bool modelPar_given_NBODYN1;
double modelPar_NBODYN2;
double d_modelPar_NBODYN2_dX;
bool modelPar_given_NBODYN2;
double modelPar_NSD;
double d_modelPar_NSD_dX;
bool modelPar_given_NSD;
double modelPar_PHIG;
double d_modelPar_PHIG_dX;
bool modelPar_given_PHIG;
double modelPar_PHIGL;
double d_modelPar_PHIGL_dX;
bool modelPar_given_PHIGL;
double modelPar_PHIGN1;
double d_modelPar_PHIGN1_dX;
bool modelPar_given_PHIGN1;
double modelPar_PHIGN2;
double d_modelPar_PHIGN2_dX;
bool modelPar_given_PHIGN2;
double modelPar_EPSROX;
double d_modelPar_EPSROX_dX;
bool modelPar_given_EPSROX;
double modelPar_EPSRSUB;
double d_modelPar_EPSRSUB_dX;
bool modelPar_given_EPSRSUB;
double modelPar_EASUB;
double d_modelPar_EASUB_dX;
bool modelPar_given_EASUB;
double modelPar_NI0SUB;
double d_modelPar_NI0SUB_dX;
bool modelPar_given_NI0SUB;
double modelPar_BG0SUB;
double d_modelPar_BG0SUB_dX;
bool modelPar_given_BG0SUB;
double modelPar_NC0SUB;
double d_modelPar_NC0SUB_dX;
bool modelPar_given_NC0SUB;
double modelPar_NGATE;
double d_modelPar_NGATE_dX;
bool modelPar_given_NGATE;
double modelPar_Imin;
double d_modelPar_Imin_dX;
bool modelPar_given_Imin;
double modelPar_CIT;
double d_modelPar_CIT_dX;
bool modelPar_given_CIT;
double modelPar_CDSC;
double d_modelPar_CDSC_dX;
bool modelPar_given_CDSC;
double modelPar_CDSCN1;
double d_modelPar_CDSCN1_dX;
bool modelPar_given_CDSCN1;
double modelPar_CDSCN2;
double d_modelPar_CDSCN2_dX;
bool modelPar_given_CDSCN2;
double modelPar_CDSCD;
double d_modelPar_CDSCD_dX;
bool modelPar_given_CDSCD;
double modelPar_CDSCDN1;
double d_modelPar_CDSCDN1_dX;
bool modelPar_given_CDSCDN1;
double modelPar_CDSCDN2;
double d_modelPar_CDSCDN2_dX;
bool modelPar_given_CDSCDN2;
double modelPar_CDSCDR;
double d_modelPar_CDSCDR_dX;
bool modelPar_given_CDSCDR;
double modelPar_CDSCDRN1;
double d_modelPar_CDSCDRN1_dX;
bool modelPar_given_CDSCDRN1;
double modelPar_CDSCDRN2;
double d_modelPar_CDSCDRN2_dX;
bool modelPar_given_CDSCDRN2;
double modelPar_DVT0;
double d_modelPar_DVT0_dX;
bool modelPar_given_DVT0;
double modelPar_DVT1;
double d_modelPar_DVT1_dX;
bool modelPar_given_DVT1;
double modelPar_DVT1SS;
double d_modelPar_DVT1SS_dX;
bool modelPar_given_DVT1SS;
double modelPar_PHIN;
double d_modelPar_PHIN_dX;
bool modelPar_given_PHIN;
double modelPar_ETA0;
double d_modelPar_ETA0_dX;
bool modelPar_given_ETA0;
double modelPar_ETA0N1;
double d_modelPar_ETA0N1_dX;
bool modelPar_given_ETA0N1;
double modelPar_ETA0N2;
double d_modelPar_ETA0N2_dX;
bool modelPar_given_ETA0N2;
double modelPar_TETA0;
double d_modelPar_TETA0_dX;
bool modelPar_given_TETA0;
double modelPar_ETA0R;
double d_modelPar_ETA0R_dX;
bool modelPar_given_ETA0R;
double modelPar_TETA0R;
double d_modelPar_TETA0R_dX;
bool modelPar_given_TETA0R;
double modelPar_DSUB;
double d_modelPar_DSUB_dX;
bool modelPar_given_DSUB;
double modelPar_DVTP0;
double d_modelPar_DVTP0_dX;
bool modelPar_given_DVTP0;
double modelPar_DVTP1;
double d_modelPar_DVTP1_dX;
bool modelPar_given_DVTP1;
double modelPar_K1RSCE;
double d_modelPar_K1RSCE_dX;
bool modelPar_given_K1RSCE;
double modelPar_LPE0;
double d_modelPar_LPE0_dX;
bool modelPar_given_LPE0;
double modelPar_DVTSHIFT;
double d_modelPar_DVTSHIFT_dX;
bool modelPar_given_DVTSHIFT;
double modelPar_K0;
double d_modelPar_K0_dX;
bool modelPar_given_K0;
double modelPar_K01;
double d_modelPar_K01_dX;
bool modelPar_given_K01;
double modelPar_K0SI;
double d_modelPar_K0SI_dX;
bool modelPar_given_K0SI;
double modelPar_K0SI1;
double d_modelPar_K0SI1_dX;
bool modelPar_given_K0SI1;
double modelPar_K1SI;
double d_modelPar_K1SI_dX;
bool modelPar_given_K1SI;
double modelPar_K1SI1;
double d_modelPar_K1SI1_dX;
bool modelPar_given_K1SI1;
double modelPar_PHIBE;
double d_modelPar_PHIBE_dX;
bool modelPar_given_PHIBE;
double modelPar_K1;
double d_modelPar_K1_dX;
bool modelPar_given_K1;
double modelPar_K11;
double d_modelPar_K11_dX;
bool modelPar_given_K11;
double modelPar_K1SAT;
double d_modelPar_K1SAT_dX;
bool modelPar_given_K1SAT;
double modelPar_K1SAT1;
double d_modelPar_K1SAT1_dX;
bool modelPar_given_K1SAT1;
double modelPar_QMFACTOR;
double d_modelPar_QMFACTOR_dX;
bool modelPar_given_QMFACTOR;
double modelPar_QMTCENIV;
double d_modelPar_QMTCENIV_dX;
bool modelPar_given_QMTCENIV;
double modelPar_QMTCENCV;
double d_modelPar_QMTCENCV_dX;
bool modelPar_given_QMTCENCV;
double modelPar_QMTCENCVA;
double d_modelPar_QMTCENCVA_dX;
bool modelPar_given_QMTCENCVA;
double modelPar_AQMTCEN;
double d_modelPar_AQMTCEN_dX;
bool modelPar_given_AQMTCEN;
double modelPar_BQMTCEN;
double d_modelPar_BQMTCEN_dX;
bool modelPar_given_BQMTCEN;
double modelPar_ETAQM;
double d_modelPar_ETAQM_dX;
bool modelPar_given_ETAQM;
double modelPar_QM0;
double d_modelPar_QM0_dX;
bool modelPar_given_QM0;
double modelPar_PQM;
double d_modelPar_PQM_dX;
bool modelPar_given_PQM;
double modelPar_QM0ACC;
double d_modelPar_QM0ACC_dX;
bool modelPar_given_QM0ACC;
double modelPar_PQMACC;
double d_modelPar_PQMACC_dX;
bool modelPar_given_PQMACC;
double modelPar_VSAT;
double d_modelPar_VSAT_dX;
bool modelPar_given_VSAT;
double modelPar_VSATN1;
double d_modelPar_VSATN1_dX;
bool modelPar_given_VSATN1;
double modelPar_VSATN2;
double d_modelPar_VSATN2_dX;
bool modelPar_given_VSATN2;
double modelPar_AVSAT;
double d_modelPar_AVSAT_dX;
bool modelPar_given_AVSAT;
double modelPar_BVSAT;
double d_modelPar_BVSAT_dX;
bool modelPar_given_BVSAT;
double modelPar_VSAT1;
double d_modelPar_VSAT1_dX;
bool modelPar_given_VSAT1;
double modelPar_VSAT1N1;
double d_modelPar_VSAT1N1_dX;
bool modelPar_given_VSAT1N1;
double modelPar_VSAT1N2;
double d_modelPar_VSAT1N2_dX;
bool modelPar_given_VSAT1N2;
double modelPar_VSAT1R;
double d_modelPar_VSAT1R_dX;
bool modelPar_given_VSAT1R;
double modelPar_VSAT1RN1;
double d_modelPar_VSAT1RN1_dX;
bool modelPar_given_VSAT1RN1;
double modelPar_VSAT1RN2;
double d_modelPar_VSAT1RN2_dX;
bool modelPar_given_VSAT1RN2;
double modelPar_AVSAT1;
double d_modelPar_AVSAT1_dX;
bool modelPar_given_AVSAT1;
double modelPar_BVSAT1;
double d_modelPar_BVSAT1_dX;
bool modelPar_given_BVSAT1;
double modelPar_DELTAVSAT;
double d_modelPar_DELTAVSAT_dX;
bool modelPar_given_DELTAVSAT;
double modelPar_PSAT;
double d_modelPar_PSAT_dX;
bool modelPar_given_PSAT;
double modelPar_APSAT;
double d_modelPar_APSAT_dX;
bool modelPar_given_APSAT;
double modelPar_BPSAT;
double d_modelPar_BPSAT_dX;
bool modelPar_given_BPSAT;
double modelPar_KSATIV;
double d_modelPar_KSATIV_dX;
bool modelPar_given_KSATIV;
double modelPar_VSATCV;
double d_modelPar_VSATCV_dX;
bool modelPar_given_VSATCV;
double modelPar_AVSATCV;
double d_modelPar_AVSATCV_dX;
bool modelPar_given_AVSATCV;
double modelPar_BVSATCV;
double d_modelPar_BVSATCV_dX;
bool modelPar_given_BVSATCV;
double modelPar_DELTAVSATCV;
double d_modelPar_DELTAVSATCV_dX;
bool modelPar_given_DELTAVSATCV;
double modelPar_PSATCV;
double d_modelPar_PSATCV_dX;
bool modelPar_given_PSATCV;
double modelPar_APSATCV;
double d_modelPar_APSATCV_dX;
bool modelPar_given_APSATCV;
double modelPar_BPSATCV;
double d_modelPar_BPSATCV_dX;
bool modelPar_given_BPSATCV;
double modelPar_MEXP;
double d_modelPar_MEXP_dX;
bool modelPar_given_MEXP;
double modelPar_AMEXP;
double d_modelPar_AMEXP_dX;
bool modelPar_given_AMEXP;
double modelPar_BMEXP;
double d_modelPar_BMEXP_dX;
bool modelPar_given_BMEXP;
double modelPar_MEXPR;
double d_modelPar_MEXPR_dX;
bool modelPar_given_MEXPR;
double modelPar_AMEXPR;
double d_modelPar_AMEXPR_dX;
bool modelPar_given_AMEXPR;
double modelPar_BMEXPR;
double d_modelPar_BMEXPR_dX;
bool modelPar_given_BMEXPR;
double modelPar_PTWG;
double d_modelPar_PTWG_dX;
bool modelPar_given_PTWG;
double modelPar_PTWGR;
double d_modelPar_PTWGR_dX;
bool modelPar_given_PTWGR;
double modelPar_APTWG;
double d_modelPar_APTWG_dX;
bool modelPar_given_APTWG;
double modelPar_BPTWG;
double d_modelPar_BPTWG_dX;
bool modelPar_given_BPTWG;
double modelPar_AT;
double d_modelPar_AT_dX;
bool modelPar_given_AT;
double modelPar_TMEXP;
double d_modelPar_TMEXP_dX;
bool modelPar_given_TMEXP;
double modelPar_TMEXPR;
double d_modelPar_TMEXPR_dX;
bool modelPar_given_TMEXPR;
double modelPar_PTWGT;
double d_modelPar_PTWGT_dX;
bool modelPar_given_PTWGT;
double modelPar_U0;
double d_modelPar_U0_dX;
bool modelPar_given_U0;
double modelPar_U0N1;
double d_modelPar_U0N1_dX;
bool modelPar_given_U0N1;
double modelPar_U0N2;
double d_modelPar_U0N2_dX;
bool modelPar_given_U0N2;
double modelPar_ETAMOB;
double d_modelPar_ETAMOB_dX;
bool modelPar_given_ETAMOB;
double modelPar_UP;
double d_modelPar_UP_dX;
bool modelPar_given_UP;
double modelPar_LPA;
double d_modelPar_LPA_dX;
bool modelPar_given_LPA;
double modelPar_UA;
double d_modelPar_UA_dX;
bool modelPar_given_UA;
double modelPar_AUA;
double d_modelPar_AUA_dX;
bool modelPar_given_AUA;
double modelPar_BUA;
double d_modelPar_BUA_dX;
bool modelPar_given_BUA;
double modelPar_UC;
double d_modelPar_UC_dX;
bool modelPar_given_UC;
double modelPar_EU;
double d_modelPar_EU_dX;
bool modelPar_given_EU;
double modelPar_AEU;
double d_modelPar_AEU_dX;
bool modelPar_given_AEU;
double modelPar_BEU;
double d_modelPar_BEU_dX;
bool modelPar_given_BEU;
double modelPar_UD;
double d_modelPar_UD_dX;
bool modelPar_given_UD;
double modelPar_AUD;
double d_modelPar_AUD_dX;
bool modelPar_given_AUD;
double modelPar_BUD;
double d_modelPar_BUD_dX;
bool modelPar_given_BUD;
double modelPar_UCS;
double d_modelPar_UCS_dX;
bool modelPar_given_UCS;
double modelPar_UTE;
double d_modelPar_UTE_dX;
bool modelPar_given_UTE;
double modelPar_UTL;
double d_modelPar_UTL_dX;
bool modelPar_given_UTL;
double modelPar_EMOBT;
double d_modelPar_EMOBT_dX;
bool modelPar_given_EMOBT;
double modelPar_UA1;
double d_modelPar_UA1_dX;
bool modelPar_given_UA1;
double modelPar_UC1;
double d_modelPar_UC1_dX;
bool modelPar_given_UC1;
double modelPar_UD1;
double d_modelPar_UD1_dX;
bool modelPar_given_UD1;
double modelPar_UCSTE;
double d_modelPar_UCSTE_dX;
bool modelPar_given_UCSTE;
double modelPar_CHARGEWF;
double d_modelPar_CHARGEWF_dX;
bool modelPar_given_CHARGEWF;
double modelPar_RDSWMIN;
double d_modelPar_RDSWMIN_dX;
bool modelPar_given_RDSWMIN;
double modelPar_RDSW;
double d_modelPar_RDSW_dX;
bool modelPar_given_RDSW;
double modelPar_ARDSW;
double d_modelPar_ARDSW_dX;
bool modelPar_given_ARDSW;
double modelPar_BRDSW;
double d_modelPar_BRDSW_dX;
bool modelPar_given_BRDSW;
double modelPar_RSWMIN;
double d_modelPar_RSWMIN_dX;
bool modelPar_given_RSWMIN;
double modelPar_RSW;
double d_modelPar_RSW_dX;
bool modelPar_given_RSW;
double modelPar_ARSW;
double d_modelPar_ARSW_dX;
bool modelPar_given_ARSW;
double modelPar_BRSW;
double d_modelPar_BRSW_dX;
bool modelPar_given_BRSW;
double modelPar_RDWMIN;
double d_modelPar_RDWMIN_dX;
bool modelPar_given_RDWMIN;
double modelPar_RDW;
double d_modelPar_RDW_dX;
bool modelPar_given_RDW;
double modelPar_ARDW;
double d_modelPar_ARDW_dX;
bool modelPar_given_ARDW;
double modelPar_BRDW;
double d_modelPar_BRDW_dX;
bool modelPar_given_BRDW;
double modelPar_RSDR;
double d_modelPar_RSDR_dX;
bool modelPar_given_RSDR;
double modelPar_RSDRR;
double d_modelPar_RSDRR_dX;
bool modelPar_given_RSDRR;
double modelPar_RDDR;
double d_modelPar_RDDR_dX;
bool modelPar_given_RDDR;
double modelPar_RDDRR;
double d_modelPar_RDDRR_dX;
bool modelPar_given_RDDRR;
double modelPar_PRSDR;
double d_modelPar_PRSDR_dX;
bool modelPar_given_PRSDR;
double modelPar_PRDDR;
double d_modelPar_PRDDR_dX;
bool modelPar_given_PRDDR;
double modelPar_PRWGS;
double d_modelPar_PRWGS_dX;
bool modelPar_given_PRWGS;
double modelPar_PRWGD;
double d_modelPar_PRWGD_dX;
bool modelPar_given_PRWGD;
double modelPar_WR;
double d_modelPar_WR_dX;
bool modelPar_given_WR;
double modelPar_PRT;
double d_modelPar_PRT_dX;
bool modelPar_given_PRT;
double modelPar_TRSDR;
double d_modelPar_TRSDR_dX;
bool modelPar_given_TRSDR;
double modelPar_TRDDR;
double d_modelPar_TRDDR_dX;
bool modelPar_given_TRDDR;
double modelPar_PDIBL1;
double d_modelPar_PDIBL1_dX;
bool modelPar_given_PDIBL1;
double modelPar_PDIBL1R;
double d_modelPar_PDIBL1R_dX;
bool modelPar_given_PDIBL1R;
double modelPar_PDIBL2;
double d_modelPar_PDIBL2_dX;
bool modelPar_given_PDIBL2;
double modelPar_DROUT;
double d_modelPar_DROUT_dX;
bool modelPar_given_DROUT;
double modelPar_PVAG;
double d_modelPar_PVAG_dX;
bool modelPar_given_PVAG;
double modelPar_PCLM;
double d_modelPar_PCLM_dX;
bool modelPar_given_PCLM;
double modelPar_APCLM;
double d_modelPar_APCLM_dX;
bool modelPar_given_APCLM;
double modelPar_BPCLM;
double d_modelPar_BPCLM_dX;
bool modelPar_given_BPCLM;
double modelPar_PCLMG;
double d_modelPar_PCLMG_dX;
bool modelPar_given_PCLMG;
double modelPar_PCLMCV;
double d_modelPar_PCLMCV_dX;
bool modelPar_given_PCLMCV;
double modelPar_A1;
double d_modelPar_A1_dX;
bool modelPar_given_A1;
double modelPar_A11;
double d_modelPar_A11_dX;
bool modelPar_given_A11;
double modelPar_A2;
double d_modelPar_A2_dX;
bool modelPar_given_A2;
double modelPar_A21;
double d_modelPar_A21_dX;
bool modelPar_given_A21;
double modelPar_RGEXT;
double d_modelPar_RGEXT_dX;
bool modelPar_given_RGEXT;
double modelPar_RGFIN;
double d_modelPar_RGFIN_dX;
bool modelPar_given_RGFIN;
double modelPar_RSHS;
double d_modelPar_RSHS_dX;
bool modelPar_given_RSHS;
double modelPar_RSHD;
double d_modelPar_RSHD_dX;
bool modelPar_given_RSHD;
double modelPar_HEPI;
double d_modelPar_HEPI_dX;
bool modelPar_given_HEPI;
double modelPar_TSILI;
double d_modelPar_TSILI_dX;
bool modelPar_given_TSILI;
double modelPar_RHOC;
double d_modelPar_RHOC_dX;
bool modelPar_given_RHOC;
double modelPar_RHORSD;
double d_modelPar_RHORSD_dX;
bool modelPar_given_RHORSD;
double modelPar_CRATIO;
double d_modelPar_CRATIO_dX;
bool modelPar_given_CRATIO;
double modelPar_DELTAPRSD;
double d_modelPar_DELTAPRSD_dX;
bool modelPar_given_DELTAPRSD;
double modelPar_LSP;
double d_modelPar_LSP_dX;
bool modelPar_given_LSP;
double modelPar_EPSRSP;
double d_modelPar_EPSRSP_dX;
bool modelPar_given_EPSRSP;
double modelPar_TGATE;
double d_modelPar_TGATE_dX;
bool modelPar_given_TGATE;
double modelPar_TMASK;
double d_modelPar_TMASK_dX;
bool modelPar_given_TMASK;
double modelPar_ASILIEND;
double d_modelPar_ASILIEND_dX;
bool modelPar_given_ASILIEND;
double modelPar_ARSDEND;
double d_modelPar_ARSDEND_dX;
bool modelPar_given_ARSDEND;
double modelPar_PRSDEND;
double d_modelPar_PRSDEND_dX;
bool modelPar_given_PRSDEND;
double modelPar_NSDE;
double d_modelPar_NSDE_dX;
bool modelPar_given_NSDE;
double modelPar_RGEOA;
double d_modelPar_RGEOA_dX;
bool modelPar_given_RGEOA;
double modelPar_RGEOB;
double d_modelPar_RGEOB_dX;
bool modelPar_given_RGEOB;
double modelPar_RGEOC;
double d_modelPar_RGEOC_dX;
bool modelPar_given_RGEOC;
double modelPar_RGEOD;
double d_modelPar_RGEOD_dX;
bool modelPar_given_RGEOD;
double modelPar_RGEOE;
double d_modelPar_RGEOE_dX;
bool modelPar_given_RGEOE;
double modelPar_CGEOA;
double d_modelPar_CGEOA_dX;
bool modelPar_given_CGEOA;
double modelPar_CGEOB;
double d_modelPar_CGEOB_dX;
bool modelPar_given_CGEOB;
double modelPar_CGEOC;
double d_modelPar_CGEOC_dX;
bool modelPar_given_CGEOC;
double modelPar_CGEOD;
double d_modelPar_CGEOD_dX;
bool modelPar_given_CGEOD;
double modelPar_CGEOE;
double d_modelPar_CGEOE_dX;
bool modelPar_given_CGEOE;
double modelPar_AIGBINV;
double d_modelPar_AIGBINV_dX;
bool modelPar_given_AIGBINV;
double modelPar_AIGBINV1;
double d_modelPar_AIGBINV1_dX;
bool modelPar_given_AIGBINV1;
double modelPar_BIGBINV;
double d_modelPar_BIGBINV_dX;
bool modelPar_given_BIGBINV;
double modelPar_CIGBINV;
double d_modelPar_CIGBINV_dX;
bool modelPar_given_CIGBINV;
double modelPar_EIGBINV;
double d_modelPar_EIGBINV_dX;
bool modelPar_given_EIGBINV;
double modelPar_NIGBINV;
double d_modelPar_NIGBINV_dX;
bool modelPar_given_NIGBINV;
double modelPar_AIGBACC;
double d_modelPar_AIGBACC_dX;
bool modelPar_given_AIGBACC;
double modelPar_AIGBACC1;
double d_modelPar_AIGBACC1_dX;
bool modelPar_given_AIGBACC1;
double modelPar_BIGBACC;
double d_modelPar_BIGBACC_dX;
bool modelPar_given_BIGBACC;
double modelPar_CIGBACC;
double d_modelPar_CIGBACC_dX;
bool modelPar_given_CIGBACC;
double modelPar_NIGBACC;
double d_modelPar_NIGBACC_dX;
bool modelPar_given_NIGBACC;
double modelPar_AIGC;
double d_modelPar_AIGC_dX;
bool modelPar_given_AIGC;
double modelPar_AIGC1;
double d_modelPar_AIGC1_dX;
bool modelPar_given_AIGC1;
double modelPar_BIGC;
double d_modelPar_BIGC_dX;
bool modelPar_given_BIGC;
double modelPar_CIGC;
double d_modelPar_CIGC_dX;
bool modelPar_given_CIGC;
double modelPar_PIGCD;
double d_modelPar_PIGCD_dX;
bool modelPar_given_PIGCD;
double modelPar_DLCIGS;
double d_modelPar_DLCIGS_dX;
bool modelPar_given_DLCIGS;
double modelPar_AIGS;
double d_modelPar_AIGS_dX;
bool modelPar_given_AIGS;
double modelPar_AIGS1;
double d_modelPar_AIGS1_dX;
bool modelPar_given_AIGS1;
double modelPar_BIGS;
double d_modelPar_BIGS_dX;
bool modelPar_given_BIGS;
double modelPar_CIGS;
double d_modelPar_CIGS_dX;
bool modelPar_given_CIGS;
double modelPar_DLCIGD;
double d_modelPar_DLCIGD_dX;
bool modelPar_given_DLCIGD;
double modelPar_AIGD;
double d_modelPar_AIGD_dX;
bool modelPar_given_AIGD;
double modelPar_AIGD1;
double d_modelPar_AIGD1_dX;
bool modelPar_given_AIGD1;
double modelPar_BIGD;
double d_modelPar_BIGD_dX;
bool modelPar_given_BIGD;
double modelPar_CIGD;
double d_modelPar_CIGD_dX;
bool modelPar_given_CIGD;
double modelPar_TOXREF;
double d_modelPar_TOXREF_dX;
bool modelPar_given_TOXREF;
double modelPar_TOXG;
double d_modelPar_TOXG_dX;
bool modelPar_given_TOXG;
double modelPar_NTOX;
double d_modelPar_NTOX_dX;
bool modelPar_given_NTOX;
double modelPar_POXEDGE;
double d_modelPar_POXEDGE_dX;
bool modelPar_given_POXEDGE;
double modelPar_AGISL;
double d_modelPar_AGISL_dX;
bool modelPar_given_AGISL;
double modelPar_BGISL;
double d_modelPar_BGISL_dX;
bool modelPar_given_BGISL;
double modelPar_CGISL;
double d_modelPar_CGISL_dX;
bool modelPar_given_CGISL;
double modelPar_EGISL;
double d_modelPar_EGISL_dX;
bool modelPar_given_EGISL;
double modelPar_PGISL;
double d_modelPar_PGISL_dX;
bool modelPar_given_PGISL;
double modelPar_AGIDL;
double d_modelPar_AGIDL_dX;
bool modelPar_given_AGIDL;
double modelPar_BGIDL;
double d_modelPar_BGIDL_dX;
bool modelPar_given_BGIDL;
double modelPar_CGIDL;
double d_modelPar_CGIDL_dX;
bool modelPar_given_CGIDL;
double modelPar_EGIDL;
double d_modelPar_EGIDL_dX;
bool modelPar_given_EGIDL;
double modelPar_PGIDL;
double d_modelPar_PGIDL_dX;
bool modelPar_given_PGIDL;
double modelPar_ALPHA0;
double d_modelPar_ALPHA0_dX;
bool modelPar_given_ALPHA0;
double modelPar_ALPHA01;
double d_modelPar_ALPHA01_dX;
bool modelPar_given_ALPHA01;
double modelPar_ALPHA1;
double d_modelPar_ALPHA1_dX;
bool modelPar_given_ALPHA1;
double modelPar_ALPHA11;
double d_modelPar_ALPHA11_dX;
bool modelPar_given_ALPHA11;
double modelPar_BETA0;
double d_modelPar_BETA0_dX;
bool modelPar_given_BETA0;
double modelPar_ALPHAII0;
double d_modelPar_ALPHAII0_dX;
bool modelPar_given_ALPHAII0;
double modelPar_ALPHAII01;
double d_modelPar_ALPHAII01_dX;
bool modelPar_given_ALPHAII01;
double modelPar_ALPHAII1;
double d_modelPar_ALPHAII1_dX;
bool modelPar_given_ALPHAII1;
double modelPar_ALPHAII11;
double d_modelPar_ALPHAII11_dX;
bool modelPar_given_ALPHAII11;
double modelPar_BETAII0;
double d_modelPar_BETAII0_dX;
bool modelPar_given_BETAII0;
double modelPar_BETAII1;
double d_modelPar_BETAII1_dX;
bool modelPar_given_BETAII1;
double modelPar_BETAII2;
double d_modelPar_BETAII2_dX;
bool modelPar_given_BETAII2;
double modelPar_ESATII;
double d_modelPar_ESATII_dX;
bool modelPar_given_ESATII;
double modelPar_LII;
double d_modelPar_LII_dX;
bool modelPar_given_LII;
double modelPar_SII0;
double d_modelPar_SII0_dX;
bool modelPar_given_SII0;
double modelPar_SII1;
double d_modelPar_SII1_dX;
bool modelPar_given_SII1;
double modelPar_SII2;
double d_modelPar_SII2_dX;
bool modelPar_given_SII2;
double modelPar_SIID;
double d_modelPar_SIID_dX;
bool modelPar_given_SIID;
double modelPar_EOTACC;
double d_modelPar_EOTACC_dX;
bool modelPar_given_EOTACC;
double modelPar_DELVFBACC;
double d_modelPar_DELVFBACC_dX;
bool modelPar_given_DELVFBACC;
double modelPar_CFS;
double d_modelPar_CFS_dX;
bool modelPar_given_CFS;
double modelPar_CFD;
double d_modelPar_CFD_dX;
bool modelPar_given_CFD;
double modelPar_CGSO;
double d_modelPar_CGSO_dX;
bool modelPar_given_CGSO;
double modelPar_CGDO;
double d_modelPar_CGDO_dX;
bool modelPar_given_CGDO;
double modelPar_CGSL;
double d_modelPar_CGSL_dX;
bool modelPar_given_CGSL;
double modelPar_CGDL;
double d_modelPar_CGDL_dX;
bool modelPar_given_CGDL;
double modelPar_CKAPPAS;
double d_modelPar_CKAPPAS_dX;
bool modelPar_given_CKAPPAS;
double modelPar_CKAPPAD;
double d_modelPar_CKAPPAD_dX;
bool modelPar_given_CKAPPAD;
double modelPar_CGBO;
double d_modelPar_CGBO_dX;
bool modelPar_given_CGBO;
double modelPar_CGBN;
double d_modelPar_CGBN_dX;
bool modelPar_given_CGBN;
double modelPar_CGBL;
double d_modelPar_CGBL_dX;
bool modelPar_given_CGBL;
double modelPar_CKAPPAB;
double d_modelPar_CKAPPAB_dX;
bool modelPar_given_CKAPPAB;
double modelPar_CSDESW;
double d_modelPar_CSDESW_dX;
bool modelPar_given_CSDESW;
double modelPar_CJS;
double d_modelPar_CJS_dX;
bool modelPar_given_CJS;
double modelPar_CJD;
double d_modelPar_CJD_dX;
bool modelPar_given_CJD;
double modelPar_CJSWS;
double d_modelPar_CJSWS_dX;
bool modelPar_given_CJSWS;
double modelPar_CJSWD;
double d_modelPar_CJSWD_dX;
bool modelPar_given_CJSWD;
double modelPar_CJSWGS;
double d_modelPar_CJSWGS_dX;
bool modelPar_given_CJSWGS;
double modelPar_CJSWGD;
double d_modelPar_CJSWGD_dX;
bool modelPar_given_CJSWGD;
double modelPar_PBS;
double d_modelPar_PBS_dX;
bool modelPar_given_PBS;
double modelPar_PBD;
double d_modelPar_PBD_dX;
bool modelPar_given_PBD;
double modelPar_PBSWS;
double d_modelPar_PBSWS_dX;
bool modelPar_given_PBSWS;
double modelPar_PBSWD;
double d_modelPar_PBSWD_dX;
bool modelPar_given_PBSWD;
double modelPar_PBSWGS;
double d_modelPar_PBSWGS_dX;
bool modelPar_given_PBSWGS;
double modelPar_PBSWGD;
double d_modelPar_PBSWGD_dX;
bool modelPar_given_PBSWGD;
double modelPar_MJS;
double d_modelPar_MJS_dX;
bool modelPar_given_MJS;
double modelPar_MJD;
double d_modelPar_MJD_dX;
bool modelPar_given_MJD;
double modelPar_MJSWS;
double d_modelPar_MJSWS_dX;
bool modelPar_given_MJSWS;
double modelPar_MJSWD;
double d_modelPar_MJSWD_dX;
bool modelPar_given_MJSWD;
double modelPar_MJSWGS;
double d_modelPar_MJSWGS_dX;
bool modelPar_given_MJSWGS;
double modelPar_MJSWGD;
double d_modelPar_MJSWGD_dX;
bool modelPar_given_MJSWGD;
double modelPar_SJS;
double d_modelPar_SJS_dX;
bool modelPar_given_SJS;
double modelPar_SJD;
double d_modelPar_SJD_dX;
bool modelPar_given_SJD;
double modelPar_SJSWS;
double d_modelPar_SJSWS_dX;
bool modelPar_given_SJSWS;
double modelPar_SJSWD;
double d_modelPar_SJSWD_dX;
bool modelPar_given_SJSWD;
double modelPar_SJSWGS;
double d_modelPar_SJSWGS_dX;
bool modelPar_given_SJSWGS;
double modelPar_SJSWGD;
double d_modelPar_SJSWGD_dX;
bool modelPar_given_SJSWGD;
double modelPar_MJS2;
double d_modelPar_MJS2_dX;
bool modelPar_given_MJS2;
double modelPar_MJD2;
double d_modelPar_MJD2_dX;
bool modelPar_given_MJD2;
double modelPar_MJSWS2;
double d_modelPar_MJSWS2_dX;
bool modelPar_given_MJSWS2;
double modelPar_MJSWD2;
double d_modelPar_MJSWD2_dX;
bool modelPar_given_MJSWD2;
double modelPar_MJSWGS2;
double d_modelPar_MJSWGS2_dX;
bool modelPar_given_MJSWGS2;
double modelPar_MJSWGD2;
double d_modelPar_MJSWGD2_dX;
bool modelPar_given_MJSWGD2;
double modelPar_JSS;
double d_modelPar_JSS_dX;
bool modelPar_given_JSS;
double modelPar_JSD;
double d_modelPar_JSD_dX;
bool modelPar_given_JSD;
double modelPar_JSWS;
double d_modelPar_JSWS_dX;
bool modelPar_given_JSWS;
double modelPar_JSWD;
double d_modelPar_JSWD_dX;
bool modelPar_given_JSWD;
double modelPar_JSWGS;
double d_modelPar_JSWGS_dX;
bool modelPar_given_JSWGS;
double modelPar_JSWGD;
double d_modelPar_JSWGD_dX;
bool modelPar_given_JSWGD;
double modelPar_NJS;
double d_modelPar_NJS_dX;
bool modelPar_given_NJS;
double modelPar_NJD;
double d_modelPar_NJD_dX;
bool modelPar_given_NJD;
double modelPar_IJTHSFWD;
double d_modelPar_IJTHSFWD_dX;
bool modelPar_given_IJTHSFWD;
double modelPar_IJTHDFWD;
double d_modelPar_IJTHDFWD_dX;
bool modelPar_given_IJTHDFWD;
double modelPar_IJTHSREV;
double d_modelPar_IJTHSREV_dX;
bool modelPar_given_IJTHSREV;
double modelPar_IJTHDREV;
double d_modelPar_IJTHDREV_dX;
bool modelPar_given_IJTHDREV;
double modelPar_BVS;
double d_modelPar_BVS_dX;
bool modelPar_given_BVS;
double modelPar_BVD;
double d_modelPar_BVD_dX;
bool modelPar_given_BVD;
double modelPar_XJBVS;
double d_modelPar_XJBVS_dX;
bool modelPar_given_XJBVS;
double modelPar_XJBVD;
double d_modelPar_XJBVD_dX;
bool modelPar_given_XJBVD;
double modelPar_JTSS;
double d_modelPar_JTSS_dX;
bool modelPar_given_JTSS;
double modelPar_JTSD;
double d_modelPar_JTSD_dX;
bool modelPar_given_JTSD;
double modelPar_JTSSWS;
double d_modelPar_JTSSWS_dX;
bool modelPar_given_JTSSWS;
double modelPar_JTSSWD;
double d_modelPar_JTSSWD_dX;
bool modelPar_given_JTSSWD;
double modelPar_JTSSWGS;
double d_modelPar_JTSSWGS_dX;
bool modelPar_given_JTSSWGS;
double modelPar_JTSSWGD;
double d_modelPar_JTSSWGD_dX;
bool modelPar_given_JTSSWGD;
double modelPar_JTWEFF;
double d_modelPar_JTWEFF_dX;
bool modelPar_given_JTWEFF;
double modelPar_NJTS;
double d_modelPar_NJTS_dX;
bool modelPar_given_NJTS;
double modelPar_NJTSD;
double d_modelPar_NJTSD_dX;
bool modelPar_given_NJTSD;
double modelPar_NJTSSW;
double d_modelPar_NJTSSW_dX;
bool modelPar_given_NJTSSW;
double modelPar_NJTSSWD;
double d_modelPar_NJTSSWD_dX;
bool modelPar_given_NJTSSWD;
double modelPar_NJTSSWG;
double d_modelPar_NJTSSWG_dX;
bool modelPar_given_NJTSSWG;
double modelPar_NJTSSWGD;
double d_modelPar_NJTSSWGD_dX;
bool modelPar_given_NJTSSWGD;
double modelPar_VTSS;
double d_modelPar_VTSS_dX;
bool modelPar_given_VTSS;
double modelPar_VTSD;
double d_modelPar_VTSD_dX;
bool modelPar_given_VTSD;
double modelPar_VTSSWS;
double d_modelPar_VTSSWS_dX;
bool modelPar_given_VTSSWS;
double modelPar_VTSSWD;
double d_modelPar_VTSSWD_dX;
bool modelPar_given_VTSSWD;
double modelPar_VTSSWGS;
double d_modelPar_VTSSWGS_dX;
bool modelPar_given_VTSSWGS;
double modelPar_VTSSWGD;
double d_modelPar_VTSSWGD_dX;
bool modelPar_given_VTSSWGD;
double modelPar_LINTIGEN;
double d_modelPar_LINTIGEN_dX;
bool modelPar_given_LINTIGEN;
double modelPar_NTGEN;
double d_modelPar_NTGEN_dX;
bool modelPar_given_NTGEN;
double modelPar_AIGEN;
double d_modelPar_AIGEN_dX;
bool modelPar_given_AIGEN;
double modelPar_BIGEN;
double d_modelPar_BIGEN_dX;
bool modelPar_given_BIGEN;
double modelPar_XRCRG1;
double d_modelPar_XRCRG1_dX;
bool modelPar_given_XRCRG1;
double modelPar_XRCRG2;
double d_modelPar_XRCRG2_dX;
bool modelPar_given_XRCRG2;
double modelPar_EF;
double d_modelPar_EF_dX;
bool modelPar_given_EF;
double modelPar_EM;
double d_modelPar_EM_dX;
bool modelPar_given_EM;
double modelPar_NOIA;
double d_modelPar_NOIA_dX;
bool modelPar_given_NOIA;
double modelPar_NOIB;
double d_modelPar_NOIB_dX;
bool modelPar_given_NOIB;
double modelPar_NOIC;
double d_modelPar_NOIC_dX;
bool modelPar_given_NOIC;
double modelPar_NTNOI;
double d_modelPar_NTNOI_dX;
bool modelPar_given_NTNOI;
double modelPar_TNOM;
double d_modelPar_TNOM_dX;
bool modelPar_given_TNOM;
double modelPar_TBGASUB;
double d_modelPar_TBGASUB_dX;
bool modelPar_given_TBGASUB;
double modelPar_TBGBSUB;
double d_modelPar_TBGBSUB_dX;
bool modelPar_given_TBGBSUB;
double modelPar_KT1;
double d_modelPar_KT1_dX;
bool modelPar_given_KT1;
double modelPar_KT1L;
double d_modelPar_KT1L_dX;
bool modelPar_given_KT1L;
double modelPar_TSS;
double d_modelPar_TSS_dX;
bool modelPar_given_TSS;
double modelPar_IIT;
double d_modelPar_IIT_dX;
bool modelPar_given_IIT;
double modelPar_TII;
double d_modelPar_TII_dX;
bool modelPar_given_TII;
double modelPar_TGIDL;
double d_modelPar_TGIDL_dX;
bool modelPar_given_TGIDL;
double modelPar_IGT;
double d_modelPar_IGT_dX;
bool modelPar_given_IGT;
double modelPar_TCJ;
double d_modelPar_TCJ_dX;
bool modelPar_given_TCJ;
double modelPar_TCJSW;
double d_modelPar_TCJSW_dX;
bool modelPar_given_TCJSW;
double modelPar_TCJSWG;
double d_modelPar_TCJSWG_dX;
bool modelPar_given_TCJSWG;
double modelPar_TPB;
double d_modelPar_TPB_dX;
bool modelPar_given_TPB;
double modelPar_TPBSW;
double d_modelPar_TPBSW_dX;
bool modelPar_given_TPBSW;
double modelPar_TPBSWG;
double d_modelPar_TPBSWG_dX;
bool modelPar_given_TPBSWG;
double modelPar_XTIS;
double d_modelPar_XTIS_dX;
bool modelPar_given_XTIS;
double modelPar_XTID;
double d_modelPar_XTID_dX;
bool modelPar_given_XTID;
double modelPar_XTSS;
double d_modelPar_XTSS_dX;
bool modelPar_given_XTSS;
double modelPar_XTSD;
double d_modelPar_XTSD_dX;
bool modelPar_given_XTSD;
double modelPar_XTSSWS;
double d_modelPar_XTSSWS_dX;
bool modelPar_given_XTSSWS;
double modelPar_XTSSWD;
double d_modelPar_XTSSWD_dX;
bool modelPar_given_XTSSWD;
double modelPar_XTSSWGS;
double d_modelPar_XTSSWGS_dX;
bool modelPar_given_XTSSWGS;
double modelPar_XTSSWGD;
double d_modelPar_XTSSWGD_dX;
bool modelPar_given_XTSSWGD;
double modelPar_TNJTS;
double d_modelPar_TNJTS_dX;
bool modelPar_given_TNJTS;
double modelPar_TNJTSD;
double d_modelPar_TNJTSD_dX;
bool modelPar_given_TNJTSD;
double modelPar_TNJTSSW;
double d_modelPar_TNJTSSW_dX;
bool modelPar_given_TNJTSSW;
double modelPar_TNJTSSWD;
double d_modelPar_TNJTSSWD_dX;
bool modelPar_given_TNJTSSWD;
double modelPar_TNJTSSWG;
double d_modelPar_TNJTSSWG_dX;
bool modelPar_given_TNJTSSWG;
double modelPar_TNJTSSWGD;
double d_modelPar_TNJTSSWGD_dX;
bool modelPar_given_TNJTSSWGD;
double modelPar_RTH0;
double d_modelPar_RTH0_dX;
bool modelPar_given_RTH0;
double modelPar_CTH0;
double d_modelPar_CTH0_dX;
bool modelPar_given_CTH0;
double modelPar_WTH0;
double d_modelPar_WTH0_dX;
bool modelPar_given_WTH0;
double modelPar_LMIN;
double d_modelPar_LMIN_dX;
bool modelPar_given_LMIN;
double modelPar_LMAX;
double d_modelPar_LMAX_dX;
bool modelPar_given_LMAX;
double modelPar_NFINMIN;
double d_modelPar_NFINMIN_dX;
bool modelPar_given_NFINMIN;
double modelPar_NFINMAX;
double d_modelPar_NFINMAX_dX;
bool modelPar_given_NFINMAX;
double modelPar_LNBODY;
double d_modelPar_LNBODY_dX;
bool modelPar_given_LNBODY;
double modelPar_NNBODY;
double d_modelPar_NNBODY_dX;
bool modelPar_given_NNBODY;
double modelPar_PNBODY;
double d_modelPar_PNBODY_dX;
bool modelPar_given_PNBODY;
double modelPar_LPHIG;
double d_modelPar_LPHIG_dX;
bool modelPar_given_LPHIG;
double modelPar_NPHIG;
double d_modelPar_NPHIG_dX;
bool modelPar_given_NPHIG;
double modelPar_PPHIG;
double d_modelPar_PPHIG_dX;
bool modelPar_given_PPHIG;
double modelPar_LNGATE;
double d_modelPar_LNGATE_dX;
bool modelPar_given_LNGATE;
double modelPar_NNGATE;
double d_modelPar_NNGATE_dX;
bool modelPar_given_NNGATE;
double modelPar_PNGATE;
double d_modelPar_PNGATE_dX;
bool modelPar_given_PNGATE;
double modelPar_LCIT;
double d_modelPar_LCIT_dX;
bool modelPar_given_LCIT;
double modelPar_NCIT;
double d_modelPar_NCIT_dX;
bool modelPar_given_NCIT;
double modelPar_PCIT;
double d_modelPar_PCIT_dX;
bool modelPar_given_PCIT;
double modelPar_LCDSC;
double d_modelPar_LCDSC_dX;
bool modelPar_given_LCDSC;
double modelPar_NCDSC;
double d_modelPar_NCDSC_dX;
bool modelPar_given_NCDSC;
double modelPar_PCDSC;
double d_modelPar_PCDSC_dX;
bool modelPar_given_PCDSC;
double modelPar_LCDSCD;
double d_modelPar_LCDSCD_dX;
bool modelPar_given_LCDSCD;
double modelPar_NCDSCD;
double d_modelPar_NCDSCD_dX;
bool modelPar_given_NCDSCD;
double modelPar_PCDSCD;
double d_modelPar_PCDSCD_dX;
bool modelPar_given_PCDSCD;
double modelPar_LCDSCDR;
double d_modelPar_LCDSCDR_dX;
bool modelPar_given_LCDSCDR;
double modelPar_NCDSCDR;
double d_modelPar_NCDSCDR_dX;
bool modelPar_given_NCDSCDR;
double modelPar_PCDSCDR;
double d_modelPar_PCDSCDR_dX;
bool modelPar_given_PCDSCDR;
double modelPar_LDVT0;
double d_modelPar_LDVT0_dX;
bool modelPar_given_LDVT0;
double modelPar_NDVT0;
double d_modelPar_NDVT0_dX;
bool modelPar_given_NDVT0;
double modelPar_PDVT0;
double d_modelPar_PDVT0_dX;
bool modelPar_given_PDVT0;
double modelPar_LDVT1;
double d_modelPar_LDVT1_dX;
bool modelPar_given_LDVT1;
double modelPar_NDVT1;
double d_modelPar_NDVT1_dX;
bool modelPar_given_NDVT1;
double modelPar_PDVT1;
double d_modelPar_PDVT1_dX;
bool modelPar_given_PDVT1;
double modelPar_LDVT1SS;
double d_modelPar_LDVT1SS_dX;
bool modelPar_given_LDVT1SS;
double modelPar_NDVT1SS;
double d_modelPar_NDVT1SS_dX;
bool modelPar_given_NDVT1SS;
double modelPar_PDVT1SS;
double d_modelPar_PDVT1SS_dX;
bool modelPar_given_PDVT1SS;
double modelPar_LPHIN;
double d_modelPar_LPHIN_dX;
bool modelPar_given_LPHIN;
double modelPar_NPHIN;
double d_modelPar_NPHIN_dX;
bool modelPar_given_NPHIN;
double modelPar_PPHIN;
double d_modelPar_PPHIN_dX;
bool modelPar_given_PPHIN;
double modelPar_LETA0;
double d_modelPar_LETA0_dX;
bool modelPar_given_LETA0;
double modelPar_NETA0;
double d_modelPar_NETA0_dX;
bool modelPar_given_NETA0;
double modelPar_PETA0;
double d_modelPar_PETA0_dX;
bool modelPar_given_PETA0;
double modelPar_LETA0R;
double d_modelPar_LETA0R_dX;
bool modelPar_given_LETA0R;
double modelPar_NETA0R;
double d_modelPar_NETA0R_dX;
bool modelPar_given_NETA0R;
double modelPar_PETA0R;
double d_modelPar_PETA0R_dX;
bool modelPar_given_PETA0R;
double modelPar_LDSUB;
double d_modelPar_LDSUB_dX;
bool modelPar_given_LDSUB;
double modelPar_NDSUB;
double d_modelPar_NDSUB_dX;
bool modelPar_given_NDSUB;
double modelPar_PDSUB;
double d_modelPar_PDSUB_dX;
bool modelPar_given_PDSUB;
double modelPar_LK1RSCE;
double d_modelPar_LK1RSCE_dX;
bool modelPar_given_LK1RSCE;
double modelPar_NK1RSCE;
double d_modelPar_NK1RSCE_dX;
bool modelPar_given_NK1RSCE;
double modelPar_PK1RSCE;
double d_modelPar_PK1RSCE_dX;
bool modelPar_given_PK1RSCE;
double modelPar_LLPE0;
double d_modelPar_LLPE0_dX;
bool modelPar_given_LLPE0;
double modelPar_NLPE0;
double d_modelPar_NLPE0_dX;
bool modelPar_given_NLPE0;
double modelPar_PLPE0;
double d_modelPar_PLPE0_dX;
bool modelPar_given_PLPE0;
double modelPar_LDVTSHIFT;
double d_modelPar_LDVTSHIFT_dX;
bool modelPar_given_LDVTSHIFT;
double modelPar_NDVTSHIFT;
double d_modelPar_NDVTSHIFT_dX;
bool modelPar_given_NDVTSHIFT;
double modelPar_PDVTSHIFT;
double d_modelPar_PDVTSHIFT_dX;
bool modelPar_given_PDVTSHIFT;
double modelPar_LPHIBE;
double d_modelPar_LPHIBE_dX;
bool modelPar_given_LPHIBE;
double modelPar_NPHIBE;
double d_modelPar_NPHIBE_dX;
bool modelPar_given_NPHIBE;
double modelPar_PPHIBE;
double d_modelPar_PPHIBE_dX;
bool modelPar_given_PPHIBE;
double modelPar_LK0;
double d_modelPar_LK0_dX;
bool modelPar_given_LK0;
double modelPar_NK0;
double d_modelPar_NK0_dX;
bool modelPar_given_NK0;
double modelPar_PK0;
double d_modelPar_PK0_dX;
bool modelPar_given_PK0;
double modelPar_LK01;
double d_modelPar_LK01_dX;
bool modelPar_given_LK01;
double modelPar_NK01;
double d_modelPar_NK01_dX;
bool modelPar_given_NK01;
double modelPar_PK01;
double d_modelPar_PK01_dX;
bool modelPar_given_PK01;
double modelPar_LK0SI;
double d_modelPar_LK0SI_dX;
bool modelPar_given_LK0SI;
double modelPar_NK0SI;
double d_modelPar_NK0SI_dX;
bool modelPar_given_NK0SI;
double modelPar_PK0SI;
double d_modelPar_PK0SI_dX;
bool modelPar_given_PK0SI;
double modelPar_LK0SI1;
double d_modelPar_LK0SI1_dX;
bool modelPar_given_LK0SI1;
double modelPar_NK0SI1;
double d_modelPar_NK0SI1_dX;
bool modelPar_given_NK0SI1;
double modelPar_PK0SI1;
double d_modelPar_PK0SI1_dX;
bool modelPar_given_PK0SI1;
double modelPar_LK1SI;
double d_modelPar_LK1SI_dX;
bool modelPar_given_LK1SI;
double modelPar_NK1SI;
double d_modelPar_NK1SI_dX;
bool modelPar_given_NK1SI;
double modelPar_PK1SI;
double d_modelPar_PK1SI_dX;
bool modelPar_given_PK1SI;
double modelPar_LK1SI1;
double d_modelPar_LK1SI1_dX;
bool modelPar_given_LK1SI1;
double modelPar_NK1SI1;
double d_modelPar_NK1SI1_dX;
bool modelPar_given_NK1SI1;
double modelPar_PK1SI1;
double d_modelPar_PK1SI1_dX;
bool modelPar_given_PK1SI1;
double modelPar_LK1;
double d_modelPar_LK1_dX;
bool modelPar_given_LK1;
double modelPar_NK1;
double d_modelPar_NK1_dX;
bool modelPar_given_NK1;
double modelPar_PK1;
double d_modelPar_PK1_dX;
bool modelPar_given_PK1;
double modelPar_LK11;
double d_modelPar_LK11_dX;
bool modelPar_given_LK11;
double modelPar_NK11;
double d_modelPar_NK11_dX;
bool modelPar_given_NK11;
double modelPar_PK11;
double d_modelPar_PK11_dX;
bool modelPar_given_PK11;
double modelPar_LK1SAT;
double d_modelPar_LK1SAT_dX;
bool modelPar_given_LK1SAT;
double modelPar_NK1SAT;
double d_modelPar_NK1SAT_dX;
bool modelPar_given_NK1SAT;
double modelPar_PK1SAT;
double d_modelPar_PK1SAT_dX;
bool modelPar_given_PK1SAT;
double modelPar_LK1SAT1;
double d_modelPar_LK1SAT1_dX;
bool modelPar_given_LK1SAT1;
double modelPar_NK1SAT1;
double d_modelPar_NK1SAT1_dX;
bool modelPar_given_NK1SAT1;
double modelPar_PK1SAT1;
double d_modelPar_PK1SAT1_dX;
bool modelPar_given_PK1SAT1;
double modelPar_LDVTB;
double d_modelPar_LDVTB_dX;
bool modelPar_given_LDVTB;
double modelPar_NDVTB;
double d_modelPar_NDVTB_dX;
bool modelPar_given_NDVTB;
double modelPar_PDVTB;
double d_modelPar_PDVTB_dX;
bool modelPar_given_PDVTB;
double modelPar_LLPEB;
double d_modelPar_LLPEB_dX;
bool modelPar_given_LLPEB;
double modelPar_NLPEB;
double d_modelPar_NLPEB_dX;
bool modelPar_given_NLPEB;
double modelPar_PLPEB;
double d_modelPar_PLPEB_dX;
bool modelPar_given_PLPEB;
double modelPar_LQMFACTOR;
double d_modelPar_LQMFACTOR_dX;
bool modelPar_given_LQMFACTOR;
double modelPar_NQMFACTOR;
double d_modelPar_NQMFACTOR_dX;
bool modelPar_given_NQMFACTOR;
double modelPar_PQMFACTOR;
double d_modelPar_PQMFACTOR_dX;
bool modelPar_given_PQMFACTOR;
double modelPar_LQMTCENIV;
double d_modelPar_LQMTCENIV_dX;
bool modelPar_given_LQMTCENIV;
double modelPar_NQMTCENIV;
double d_modelPar_NQMTCENIV_dX;
bool modelPar_given_NQMTCENIV;
double modelPar_PQMTCENIV;
double d_modelPar_PQMTCENIV_dX;
bool modelPar_given_PQMTCENIV;
double modelPar_LQMTCENCV;
double d_modelPar_LQMTCENCV_dX;
bool modelPar_given_LQMTCENCV;
double modelPar_NQMTCENCV;
double d_modelPar_NQMTCENCV_dX;
bool modelPar_given_NQMTCENCV;
double modelPar_PQMTCENCV;
double d_modelPar_PQMTCENCV_dX;
bool modelPar_given_PQMTCENCV;
double modelPar_LQMTCENCVA;
double d_modelPar_LQMTCENCVA_dX;
bool modelPar_given_LQMTCENCVA;
double modelPar_NQMTCENCVA;
double d_modelPar_NQMTCENCVA_dX;
bool modelPar_given_NQMTCENCVA;
double modelPar_PQMTCENCVA;
double d_modelPar_PQMTCENCVA_dX;
bool modelPar_given_PQMTCENCVA;
double modelPar_LVSAT;
double d_modelPar_LVSAT_dX;
bool modelPar_given_LVSAT;
double modelPar_NVSAT;
double d_modelPar_NVSAT_dX;
bool modelPar_given_NVSAT;
double modelPar_PVSAT;
double d_modelPar_PVSAT_dX;
bool modelPar_given_PVSAT;
double modelPar_LVSAT1;
double d_modelPar_LVSAT1_dX;
bool modelPar_given_LVSAT1;
double modelPar_NVSAT1;
double d_modelPar_NVSAT1_dX;
bool modelPar_given_NVSAT1;
double modelPar_PVSAT1;
double d_modelPar_PVSAT1_dX;
bool modelPar_given_PVSAT1;
double modelPar_LVSAT1R;
double d_modelPar_LVSAT1R_dX;
bool modelPar_given_LVSAT1R;
double modelPar_NVSAT1R;
double d_modelPar_NVSAT1R_dX;
bool modelPar_given_NVSAT1R;
double modelPar_PVSAT1R;
double d_modelPar_PVSAT1R_dX;
bool modelPar_given_PVSAT1R;
double modelPar_LPSAT;
double d_modelPar_LPSAT_dX;
bool modelPar_given_LPSAT;
double modelPar_NPSAT;
double d_modelPar_NPSAT_dX;
bool modelPar_given_NPSAT;
double modelPar_PPSAT;
double d_modelPar_PPSAT_dX;
bool modelPar_given_PPSAT;
double modelPar_LDELTAVSAT;
double d_modelPar_LDELTAVSAT_dX;
bool modelPar_given_LDELTAVSAT;
double modelPar_NDELTAVSAT;
double d_modelPar_NDELTAVSAT_dX;
bool modelPar_given_NDELTAVSAT;
double modelPar_PDELTAVSAT;
double d_modelPar_PDELTAVSAT_dX;
bool modelPar_given_PDELTAVSAT;
double modelPar_LKSATIV;
double d_modelPar_LKSATIV_dX;
bool modelPar_given_LKSATIV;
double modelPar_NKSATIV;
double d_modelPar_NKSATIV_dX;
bool modelPar_given_NKSATIV;
double modelPar_PKSATIV;
double d_modelPar_PKSATIV_dX;
bool modelPar_given_PKSATIV;
double modelPar_LVSATCV;
double d_modelPar_LVSATCV_dX;
bool modelPar_given_LVSATCV;
double modelPar_NVSATCV;
double d_modelPar_NVSATCV_dX;
bool modelPar_given_NVSATCV;
double modelPar_PVSATCV;
double d_modelPar_PVSATCV_dX;
bool modelPar_given_PVSATCV;
double modelPar_LPSATCV;
double d_modelPar_LPSATCV_dX;
bool modelPar_given_LPSATCV;
double modelPar_NPSATCV;
double d_modelPar_NPSATCV_dX;
bool modelPar_given_NPSATCV;
double modelPar_PPSATCV;
double d_modelPar_PPSATCV_dX;
bool modelPar_given_PPSATCV;
double modelPar_LDELTAVSATCV;
double d_modelPar_LDELTAVSATCV_dX;
bool modelPar_given_LDELTAVSATCV;
double modelPar_NDELTAVSATCV;
double d_modelPar_NDELTAVSATCV_dX;
bool modelPar_given_NDELTAVSATCV;
double modelPar_PDELTAVSATCV;
double d_modelPar_PDELTAVSATCV_dX;
bool modelPar_given_PDELTAVSATCV;
double modelPar_LMEXP;
double d_modelPar_LMEXP_dX;
bool modelPar_given_LMEXP;
double modelPar_NMEXP;
double d_modelPar_NMEXP_dX;
bool modelPar_given_NMEXP;
double modelPar_PMEXP;
double d_modelPar_PMEXP_dX;
bool modelPar_given_PMEXP;
double modelPar_LMEXPR;
double d_modelPar_LMEXPR_dX;
bool modelPar_given_LMEXPR;
double modelPar_NMEXPR;
double d_modelPar_NMEXPR_dX;
bool modelPar_given_NMEXPR;
double modelPar_PMEXPR;
double d_modelPar_PMEXPR_dX;
bool modelPar_given_PMEXPR;
double modelPar_LPTWG;
double d_modelPar_LPTWG_dX;
bool modelPar_given_LPTWG;
double modelPar_NPTWG;
double d_modelPar_NPTWG_dX;
bool modelPar_given_NPTWG;
double modelPar_PPTWG;
double d_modelPar_PPTWG_dX;
bool modelPar_given_PPTWG;
double modelPar_LPTWGR;
double d_modelPar_LPTWGR_dX;
bool modelPar_given_LPTWGR;
double modelPar_NPTWGR;
double d_modelPar_NPTWGR_dX;
bool modelPar_given_NPTWGR;
double modelPar_PPTWGR;
double d_modelPar_PPTWGR_dX;
bool modelPar_given_PPTWGR;
double modelPar_LU0;
double d_modelPar_LU0_dX;
bool modelPar_given_LU0;
double modelPar_NU0;
double d_modelPar_NU0_dX;
bool modelPar_given_NU0;
double modelPar_PU0;
double d_modelPar_PU0_dX;
bool modelPar_given_PU0;
double modelPar_LETAMOB;
double d_modelPar_LETAMOB_dX;
bool modelPar_given_LETAMOB;
double modelPar_NETAMOB;
double d_modelPar_NETAMOB_dX;
bool modelPar_given_NETAMOB;
double modelPar_PETAMOB;
double d_modelPar_PETAMOB_dX;
bool modelPar_given_PETAMOB;
double modelPar_LUP;
double d_modelPar_LUP_dX;
bool modelPar_given_LUP;
double modelPar_NUP;
double d_modelPar_NUP_dX;
bool modelPar_given_NUP;
double modelPar_PUP;
double d_modelPar_PUP_dX;
bool modelPar_given_PUP;
double modelPar_LUA;
double d_modelPar_LUA_dX;
bool modelPar_given_LUA;
double modelPar_NUA;
double d_modelPar_NUA_dX;
bool modelPar_given_NUA;
double modelPar_PUA;
double d_modelPar_PUA_dX;
bool modelPar_given_PUA;
double modelPar_LUC;
double d_modelPar_LUC_dX;
bool modelPar_given_LUC;
double modelPar_NUC;
double d_modelPar_NUC_dX;
bool modelPar_given_NUC;
double modelPar_PUC;
double d_modelPar_PUC_dX;
bool modelPar_given_PUC;
double modelPar_LEU;
double d_modelPar_LEU_dX;
bool modelPar_given_LEU;
double modelPar_NEU;
double d_modelPar_NEU_dX;
bool modelPar_given_NEU;
double modelPar_PEU;
double d_modelPar_PEU_dX;
bool modelPar_given_PEU;
double modelPar_LUD;
double d_modelPar_LUD_dX;
bool modelPar_given_LUD;
double modelPar_NUD;
double d_modelPar_NUD_dX;
bool modelPar_given_NUD;
double modelPar_PUD;
double d_modelPar_PUD_dX;
bool modelPar_given_PUD;
double modelPar_LUCS;
double d_modelPar_LUCS_dX;
bool modelPar_given_LUCS;
double modelPar_NUCS;
double d_modelPar_NUCS_dX;
bool modelPar_given_NUCS;
double modelPar_PUCS;
double d_modelPar_PUCS_dX;
bool modelPar_given_PUCS;
double modelPar_LPCLM;
double d_modelPar_LPCLM_dX;
bool modelPar_given_LPCLM;
double modelPar_NPCLM;
double d_modelPar_NPCLM_dX;
bool modelPar_given_NPCLM;
double modelPar_PPCLM;
double d_modelPar_PPCLM_dX;
bool modelPar_given_PPCLM;
double modelPar_LPCLMG;
double d_modelPar_LPCLMG_dX;
bool modelPar_given_LPCLMG;
double modelPar_NPCLMG;
double d_modelPar_NPCLMG_dX;
bool modelPar_given_NPCLMG;
double modelPar_PPCLMG;
double d_modelPar_PPCLMG_dX;
bool modelPar_given_PPCLMG;
double modelPar_LPCLMCV;
double d_modelPar_LPCLMCV_dX;
bool modelPar_given_LPCLMCV;
double modelPar_NPCLMCV;
double d_modelPar_NPCLMCV_dX;
bool modelPar_given_NPCLMCV;
double modelPar_PPCLMCV;
double d_modelPar_PPCLMCV_dX;
bool modelPar_given_PPCLMCV;
double modelPar_LA1;
double d_modelPar_LA1_dX;
bool modelPar_given_LA1;
double modelPar_NA1;
double d_modelPar_NA1_dX;
bool modelPar_given_NA1;
double modelPar_PA1;
double d_modelPar_PA1_dX;
bool modelPar_given_PA1;
double modelPar_LA11;
double d_modelPar_LA11_dX;
bool modelPar_given_LA11;
double modelPar_NA11;
double d_modelPar_NA11_dX;
bool modelPar_given_NA11;
double modelPar_PA11;
double d_modelPar_PA11_dX;
bool modelPar_given_PA11;
double modelPar_LA2;
double d_modelPar_LA2_dX;
bool modelPar_given_LA2;
double modelPar_NA2;
double d_modelPar_NA2_dX;
bool modelPar_given_NA2;
double modelPar_PA2;
double d_modelPar_PA2_dX;
bool modelPar_given_PA2;
double modelPar_LA21;
double d_modelPar_LA21_dX;
bool modelPar_given_LA21;
double modelPar_NA21;
double d_modelPar_NA21_dX;
bool modelPar_given_NA21;
double modelPar_PA21;
double d_modelPar_PA21_dX;
bool modelPar_given_PA21;
double modelPar_LRDSW;
double d_modelPar_LRDSW_dX;
bool modelPar_given_LRDSW;
double modelPar_NRDSW;
double d_modelPar_NRDSW_dX;
bool modelPar_given_NRDSW;
double modelPar_PRDSW;
double d_modelPar_PRDSW_dX;
bool modelPar_given_PRDSW;
double modelPar_LRSW;
double d_modelPar_LRSW_dX;
bool modelPar_given_LRSW;
double modelPar_NRSW;
double d_modelPar_NRSW_dX;
bool modelPar_given_NRSW;
double modelPar_PRSW;
double d_modelPar_PRSW_dX;
bool modelPar_given_PRSW;
double modelPar_LRDW;
double d_modelPar_LRDW_dX;
bool modelPar_given_LRDW;
double modelPar_NRDW;
double d_modelPar_NRDW_dX;
bool modelPar_given_NRDW;
double modelPar_PRDW;
double d_modelPar_PRDW_dX;
bool modelPar_given_PRDW;
double modelPar_LPRWGS;
double d_modelPar_LPRWGS_dX;
bool modelPar_given_LPRWGS;
double modelPar_NPRWGS;
double d_modelPar_NPRWGS_dX;
bool modelPar_given_NPRWGS;
double modelPar_PPRWGS;
double d_modelPar_PPRWGS_dX;
bool modelPar_given_PPRWGS;
double modelPar_LPRWGD;
double d_modelPar_LPRWGD_dX;
bool modelPar_given_LPRWGD;
double modelPar_NPRWGD;
double d_modelPar_NPRWGD_dX;
bool modelPar_given_NPRWGD;
double modelPar_PPRWGD;
double d_modelPar_PPRWGD_dX;
bool modelPar_given_PPRWGD;
double modelPar_LWR;
double d_modelPar_LWR_dX;
bool modelPar_given_LWR;
double modelPar_NWR;
double d_modelPar_NWR_dX;
bool modelPar_given_NWR;
double modelPar_PWR;
double d_modelPar_PWR_dX;
bool modelPar_given_PWR;
double modelPar_LPDIBL1;
double d_modelPar_LPDIBL1_dX;
bool modelPar_given_LPDIBL1;
double modelPar_NPDIBL1;
double d_modelPar_NPDIBL1_dX;
bool modelPar_given_NPDIBL1;
double modelPar_PPDIBL1;
double d_modelPar_PPDIBL1_dX;
bool modelPar_given_PPDIBL1;
double modelPar_LPDIBL1R;
double d_modelPar_LPDIBL1R_dX;
bool modelPar_given_LPDIBL1R;
double modelPar_NPDIBL1R;
double d_modelPar_NPDIBL1R_dX;
bool modelPar_given_NPDIBL1R;
double modelPar_PPDIBL1R;
double d_modelPar_PPDIBL1R_dX;
bool modelPar_given_PPDIBL1R;
double modelPar_LPDIBL2;
double d_modelPar_LPDIBL2_dX;
bool modelPar_given_LPDIBL2;
double modelPar_NPDIBL2;
double d_modelPar_NPDIBL2_dX;
bool modelPar_given_NPDIBL2;
double modelPar_PPDIBL2;
double d_modelPar_PPDIBL2_dX;
bool modelPar_given_PPDIBL2;
double modelPar_LDROUT;
double d_modelPar_LDROUT_dX;
bool modelPar_given_LDROUT;
double modelPar_NDROUT;
double d_modelPar_NDROUT_dX;
bool modelPar_given_NDROUT;
double modelPar_PDROUT;
double d_modelPar_PDROUT_dX;
bool modelPar_given_PDROUT;
double modelPar_LPVAG;
double d_modelPar_LPVAG_dX;
bool modelPar_given_LPVAG;
double modelPar_NPVAG;
double d_modelPar_NPVAG_dX;
bool modelPar_given_NPVAG;
double modelPar_PPVAG;
double d_modelPar_PPVAG_dX;
bool modelPar_given_PPVAG;
double modelPar_LAIGBINV;
double d_modelPar_LAIGBINV_dX;
bool modelPar_given_LAIGBINV;
double modelPar_NAIGBINV;
double d_modelPar_NAIGBINV_dX;
bool modelPar_given_NAIGBINV;
double modelPar_PAIGBINV;
double d_modelPar_PAIGBINV_dX;
bool modelPar_given_PAIGBINV;
double modelPar_LAIGBINV1;
double d_modelPar_LAIGBINV1_dX;
bool modelPar_given_LAIGBINV1;
double modelPar_NAIGBINV1;
double d_modelPar_NAIGBINV1_dX;
bool modelPar_given_NAIGBINV1;
double modelPar_PAIGBINV1;
double d_modelPar_PAIGBINV1_dX;
bool modelPar_given_PAIGBINV1;
double modelPar_LBIGBINV;
double d_modelPar_LBIGBINV_dX;
bool modelPar_given_LBIGBINV;
double modelPar_NBIGBINV;
double d_modelPar_NBIGBINV_dX;
bool modelPar_given_NBIGBINV;
double modelPar_PBIGBINV;
double d_modelPar_PBIGBINV_dX;
bool modelPar_given_PBIGBINV;
double modelPar_LCIGBINV;
double d_modelPar_LCIGBINV_dX;
bool modelPar_given_LCIGBINV;
double modelPar_NCIGBINV;
double d_modelPar_NCIGBINV_dX;
bool modelPar_given_NCIGBINV;
double modelPar_PCIGBINV;
double d_modelPar_PCIGBINV_dX;
bool modelPar_given_PCIGBINV;
double modelPar_LEIGBINV;
double d_modelPar_LEIGBINV_dX;
bool modelPar_given_LEIGBINV;
double modelPar_NEIGBINV;
double d_modelPar_NEIGBINV_dX;
bool modelPar_given_NEIGBINV;
double modelPar_PEIGBINV;
double d_modelPar_PEIGBINV_dX;
bool modelPar_given_PEIGBINV;
double modelPar_LNIGBINV;
double d_modelPar_LNIGBINV_dX;
bool modelPar_given_LNIGBINV;
double modelPar_NNIGBINV;
double d_modelPar_NNIGBINV_dX;
bool modelPar_given_NNIGBINV;
double modelPar_PNIGBINV;
double d_modelPar_PNIGBINV_dX;
bool modelPar_given_PNIGBINV;
double modelPar_LAIGBACC;
double d_modelPar_LAIGBACC_dX;
bool modelPar_given_LAIGBACC;
double modelPar_NAIGBACC;
double d_modelPar_NAIGBACC_dX;
bool modelPar_given_NAIGBACC;
double modelPar_PAIGBACC;
double d_modelPar_PAIGBACC_dX;
bool modelPar_given_PAIGBACC;
double modelPar_LAIGBACC1;
double d_modelPar_LAIGBACC1_dX;
bool modelPar_given_LAIGBACC1;
double modelPar_NAIGBACC1;
double d_modelPar_NAIGBACC1_dX;
bool modelPar_given_NAIGBACC1;
double modelPar_PAIGBACC1;
double d_modelPar_PAIGBACC1_dX;
bool modelPar_given_PAIGBACC1;
double modelPar_LBIGBACC;
double d_modelPar_LBIGBACC_dX;
bool modelPar_given_LBIGBACC;
double modelPar_NBIGBACC;
double d_modelPar_NBIGBACC_dX;
bool modelPar_given_NBIGBACC;
double modelPar_PBIGBACC;
double d_modelPar_PBIGBACC_dX;
bool modelPar_given_PBIGBACC;
double modelPar_LCIGBACC;
double d_modelPar_LCIGBACC_dX;
bool modelPar_given_LCIGBACC;
double modelPar_NCIGBACC;
double d_modelPar_NCIGBACC_dX;
bool modelPar_given_NCIGBACC;
double modelPar_PCIGBACC;
double d_modelPar_PCIGBACC_dX;
bool modelPar_given_PCIGBACC;
double modelPar_LNIGBACC;
double d_modelPar_LNIGBACC_dX;
bool modelPar_given_LNIGBACC;
double modelPar_NNIGBACC;
double d_modelPar_NNIGBACC_dX;
bool modelPar_given_NNIGBACC;
double modelPar_PNIGBACC;
double d_modelPar_PNIGBACC_dX;
bool modelPar_given_PNIGBACC;
double modelPar_LAIGC;
double d_modelPar_LAIGC_dX;
bool modelPar_given_LAIGC;
double modelPar_NAIGC;
double d_modelPar_NAIGC_dX;
bool modelPar_given_NAIGC;
double modelPar_PAIGC;
double d_modelPar_PAIGC_dX;
bool modelPar_given_PAIGC;
double modelPar_LAIGC1;
double d_modelPar_LAIGC1_dX;
bool modelPar_given_LAIGC1;
double modelPar_NAIGC1;
double d_modelPar_NAIGC1_dX;
bool modelPar_given_NAIGC1;
double modelPar_PAIGC1;
double d_modelPar_PAIGC1_dX;
bool modelPar_given_PAIGC1;
double modelPar_LBIGC;
double d_modelPar_LBIGC_dX;
bool modelPar_given_LBIGC;
double modelPar_NBIGC;
double d_modelPar_NBIGC_dX;
bool modelPar_given_NBIGC;
double modelPar_PBIGC;
double d_modelPar_PBIGC_dX;
bool modelPar_given_PBIGC;
double modelPar_LCIGC;
double d_modelPar_LCIGC_dX;
bool modelPar_given_LCIGC;
double modelPar_NCIGC;
double d_modelPar_NCIGC_dX;
bool modelPar_given_NCIGC;
double modelPar_PCIGC;
double d_modelPar_PCIGC_dX;
bool modelPar_given_PCIGC;
double modelPar_LPIGCD;
double d_modelPar_LPIGCD_dX;
bool modelPar_given_LPIGCD;
double modelPar_NPIGCD;
double d_modelPar_NPIGCD_dX;
bool modelPar_given_NPIGCD;
double modelPar_PPIGCD;
double d_modelPar_PPIGCD_dX;
bool modelPar_given_PPIGCD;
double modelPar_LAIGS;
double d_modelPar_LAIGS_dX;
bool modelPar_given_LAIGS;
double modelPar_NAIGS;
double d_modelPar_NAIGS_dX;
bool modelPar_given_NAIGS;
double modelPar_PAIGS;
double d_modelPar_PAIGS_dX;
bool modelPar_given_PAIGS;
double modelPar_LAIGS1;
double d_modelPar_LAIGS1_dX;
bool modelPar_given_LAIGS1;
double modelPar_NAIGS1;
double d_modelPar_NAIGS1_dX;
bool modelPar_given_NAIGS1;
double modelPar_PAIGS1;
double d_modelPar_PAIGS1_dX;
bool modelPar_given_PAIGS1;
double modelPar_LBIGS;
double d_modelPar_LBIGS_dX;
bool modelPar_given_LBIGS;
double modelPar_NBIGS;
double d_modelPar_NBIGS_dX;
bool modelPar_given_NBIGS;
double modelPar_PBIGS;
double d_modelPar_PBIGS_dX;
bool modelPar_given_PBIGS;
double modelPar_LCIGS;
double d_modelPar_LCIGS_dX;
bool modelPar_given_LCIGS;
double modelPar_NCIGS;
double d_modelPar_NCIGS_dX;
bool modelPar_given_NCIGS;
double modelPar_PCIGS;
double d_modelPar_PCIGS_dX;
bool modelPar_given_PCIGS;
double modelPar_LAIGD;
double d_modelPar_LAIGD_dX;
bool modelPar_given_LAIGD;
double modelPar_NAIGD;
double d_modelPar_NAIGD_dX;
bool modelPar_given_NAIGD;
double modelPar_PAIGD;
double d_modelPar_PAIGD_dX;
bool modelPar_given_PAIGD;
double modelPar_LAIGD1;
double d_modelPar_LAIGD1_dX;
bool modelPar_given_LAIGD1;
double modelPar_NAIGD1;
double d_modelPar_NAIGD1_dX;
bool modelPar_given_NAIGD1;
double modelPar_PAIGD1;
double d_modelPar_PAIGD1_dX;
bool modelPar_given_PAIGD1;
double modelPar_LBIGD;
double d_modelPar_LBIGD_dX;
bool modelPar_given_LBIGD;
double modelPar_NBIGD;
double d_modelPar_NBIGD_dX;
bool modelPar_given_NBIGD;
double modelPar_PBIGD;
double d_modelPar_PBIGD_dX;
bool modelPar_given_PBIGD;
double modelPar_LCIGD;
double d_modelPar_LCIGD_dX;
bool modelPar_given_LCIGD;
double modelPar_NCIGD;
double d_modelPar_NCIGD_dX;
bool modelPar_given_NCIGD;
double modelPar_PCIGD;
double d_modelPar_PCIGD_dX;
bool modelPar_given_PCIGD;
double modelPar_LNTOX;
double d_modelPar_LNTOX_dX;
bool modelPar_given_LNTOX;
double modelPar_NNTOX;
double d_modelPar_NNTOX_dX;
bool modelPar_given_NNTOX;
double modelPar_PNTOX;
double d_modelPar_PNTOX_dX;
bool modelPar_given_PNTOX;
double modelPar_LPOXEDGE;
double d_modelPar_LPOXEDGE_dX;
bool modelPar_given_LPOXEDGE;
double modelPar_NPOXEDGE;
double d_modelPar_NPOXEDGE_dX;
bool modelPar_given_NPOXEDGE;
double modelPar_PPOXEDGE;
double d_modelPar_PPOXEDGE_dX;
bool modelPar_given_PPOXEDGE;
double modelPar_LAGISL;
double d_modelPar_LAGISL_dX;
bool modelPar_given_LAGISL;
double modelPar_NAGISL;
double d_modelPar_NAGISL_dX;
bool modelPar_given_NAGISL;
double modelPar_PAGISL;
double d_modelPar_PAGISL_dX;
bool modelPar_given_PAGISL;
double modelPar_LBGISL;
double d_modelPar_LBGISL_dX;
bool modelPar_given_LBGISL;
double modelPar_NBGISL;
double d_modelPar_NBGISL_dX;
bool modelPar_given_NBGISL;
double modelPar_PBGISL;
double d_modelPar_PBGISL_dX;
bool modelPar_given_PBGISL;
double modelPar_LCGISL;
double d_modelPar_LCGISL_dX;
bool modelPar_given_LCGISL;
double modelPar_NCGISL;
double d_modelPar_NCGISL_dX;
bool modelPar_given_NCGISL;
double modelPar_PCGISL;
double d_modelPar_PCGISL_dX;
bool modelPar_given_PCGISL;
double modelPar_LEGISL;
double d_modelPar_LEGISL_dX;
bool modelPar_given_LEGISL;
double modelPar_NEGISL;
double d_modelPar_NEGISL_dX;
bool modelPar_given_NEGISL;
double modelPar_PEGISL;
double d_modelPar_PEGISL_dX;
bool modelPar_given_PEGISL;
double modelPar_LPGISL;
double d_modelPar_LPGISL_dX;
bool modelPar_given_LPGISL;
double modelPar_NPGISL;
double d_modelPar_NPGISL_dX;
bool modelPar_given_NPGISL;
double modelPar_PPGISL;
double d_modelPar_PPGISL_dX;
bool modelPar_given_PPGISL;
double modelPar_LAGIDL;
double d_modelPar_LAGIDL_dX;
bool modelPar_given_LAGIDL;
double modelPar_NAGIDL;
double d_modelPar_NAGIDL_dX;
bool modelPar_given_NAGIDL;
double modelPar_PAGIDL;
double d_modelPar_PAGIDL_dX;
bool modelPar_given_PAGIDL;
double modelPar_LBGIDL;
double d_modelPar_LBGIDL_dX;
bool modelPar_given_LBGIDL;
double modelPar_NBGIDL;
double d_modelPar_NBGIDL_dX;
bool modelPar_given_NBGIDL;
double modelPar_PBGIDL;
double d_modelPar_PBGIDL_dX;
bool modelPar_given_PBGIDL;
double modelPar_LCGIDL;
double d_modelPar_LCGIDL_dX;
bool modelPar_given_LCGIDL;
double modelPar_NCGIDL;
double d_modelPar_NCGIDL_dX;
bool modelPar_given_NCGIDL;
double modelPar_PCGIDL;
double d_modelPar_PCGIDL_dX;
bool modelPar_given_PCGIDL;
double modelPar_LEGIDL;
double d_modelPar_LEGIDL_dX;
bool modelPar_given_LEGIDL;
double modelPar_NEGIDL;
double d_modelPar_NEGIDL_dX;
bool modelPar_given_NEGIDL;
double modelPar_PEGIDL;
double d_modelPar_PEGIDL_dX;
bool modelPar_given_PEGIDL;
double modelPar_LPGIDL;
double d_modelPar_LPGIDL_dX;
bool modelPar_given_LPGIDL;
double modelPar_NPGIDL;
double d_modelPar_NPGIDL_dX;
bool modelPar_given_NPGIDL;
double modelPar_PPGIDL;
double d_modelPar_PPGIDL_dX;
bool modelPar_given_PPGIDL;
double modelPar_LALPHA0;
double d_modelPar_LALPHA0_dX;
bool modelPar_given_LALPHA0;
double modelPar_NALPHA0;
double d_modelPar_NALPHA0_dX;
bool modelPar_given_NALPHA0;
double modelPar_PALPHA0;
double d_modelPar_PALPHA0_dX;
bool modelPar_given_PALPHA0;
double modelPar_LALPHA1;
double d_modelPar_LALPHA1_dX;
bool modelPar_given_LALPHA1;
double modelPar_NALPHA1;
double d_modelPar_NALPHA1_dX;
bool modelPar_given_NALPHA1;
double modelPar_PALPHA1;
double d_modelPar_PALPHA1_dX;
bool modelPar_given_PALPHA1;
double modelPar_LALPHAII0;
double d_modelPar_LALPHAII0_dX;
bool modelPar_given_LALPHAII0;
double modelPar_NALPHAII0;
double d_modelPar_NALPHAII0_dX;
bool modelPar_given_NALPHAII0;
double modelPar_PALPHAII0;
double d_modelPar_PALPHAII0_dX;
bool modelPar_given_PALPHAII0;
double modelPar_LALPHAII1;
double d_modelPar_LALPHAII1_dX;
bool modelPar_given_LALPHAII1;
double modelPar_NALPHAII1;
double d_modelPar_NALPHAII1_dX;
bool modelPar_given_NALPHAII1;
double modelPar_PALPHAII1;
double d_modelPar_PALPHAII1_dX;
bool modelPar_given_PALPHAII1;
double modelPar_LBETA0;
double d_modelPar_LBETA0_dX;
bool modelPar_given_LBETA0;
double modelPar_NBETA0;
double d_modelPar_NBETA0_dX;
bool modelPar_given_NBETA0;
double modelPar_PBETA0;
double d_modelPar_PBETA0_dX;
bool modelPar_given_PBETA0;
double modelPar_LBETAII0;
double d_modelPar_LBETAII0_dX;
bool modelPar_given_LBETAII0;
double modelPar_NBETAII0;
double d_modelPar_NBETAII0_dX;
bool modelPar_given_NBETAII0;
double modelPar_PBETAII0;
double d_modelPar_PBETAII0_dX;
bool modelPar_given_PBETAII0;
double modelPar_LBETAII1;
double d_modelPar_LBETAII1_dX;
bool modelPar_given_LBETAII1;
double modelPar_NBETAII1;
double d_modelPar_NBETAII1_dX;
bool modelPar_given_NBETAII1;
double modelPar_PBETAII1;
double d_modelPar_PBETAII1_dX;
bool modelPar_given_PBETAII1;
double modelPar_LBETAII2;
double d_modelPar_LBETAII2_dX;
bool modelPar_given_LBETAII2;
double modelPar_NBETAII2;
double d_modelPar_NBETAII2_dX;
bool modelPar_given_NBETAII2;
double modelPar_PBETAII2;
double d_modelPar_PBETAII2_dX;
bool modelPar_given_PBETAII2;
double modelPar_LESATII;
double d_modelPar_LESATII_dX;
bool modelPar_given_LESATII;
double modelPar_NESATII;
double d_modelPar_NESATII_dX;
bool modelPar_given_NESATII;
double modelPar_PESATII;
double d_modelPar_PESATII_dX;
bool modelPar_given_PESATII;
double modelPar_LLII;
double d_modelPar_LLII_dX;
bool modelPar_given_LLII;
double modelPar_NLII;
double d_modelPar_NLII_dX;
bool modelPar_given_NLII;
double modelPar_PLII;
double d_modelPar_PLII_dX;
bool modelPar_given_PLII;
double modelPar_LSII0;
double d_modelPar_LSII0_dX;
bool modelPar_given_LSII0;
double modelPar_NSII0;
double d_modelPar_NSII0_dX;
bool modelPar_given_NSII0;
double modelPar_PSII0;
double d_modelPar_PSII0_dX;
bool modelPar_given_PSII0;
double modelPar_LSII1;
double d_modelPar_LSII1_dX;
bool modelPar_given_LSII1;
double modelPar_NSII1;
double d_modelPar_NSII1_dX;
bool modelPar_given_NSII1;
double modelPar_PSII1;
double d_modelPar_PSII1_dX;
bool modelPar_given_PSII1;
double modelPar_LSII2;
double d_modelPar_LSII2_dX;
bool modelPar_given_LSII2;
double modelPar_NSII2;
double d_modelPar_NSII2_dX;
bool modelPar_given_NSII2;
double modelPar_PSII2;
double d_modelPar_PSII2_dX;
bool modelPar_given_PSII2;
double modelPar_LSIID;
double d_modelPar_LSIID_dX;
bool modelPar_given_LSIID;
double modelPar_NSIID;
double d_modelPar_NSIID_dX;
bool modelPar_given_NSIID;
double modelPar_PSIID;
double d_modelPar_PSIID_dX;
bool modelPar_given_PSIID;
double modelPar_LCFS;
double d_modelPar_LCFS_dX;
bool modelPar_given_LCFS;
double modelPar_NCFS;
double d_modelPar_NCFS_dX;
bool modelPar_given_NCFS;
double modelPar_PCFS;
double d_modelPar_PCFS_dX;
bool modelPar_given_PCFS;
double modelPar_LCFD;
double d_modelPar_LCFD_dX;
bool modelPar_given_LCFD;
double modelPar_NCFD;
double d_modelPar_NCFD_dX;
bool modelPar_given_NCFD;
double modelPar_PCFD;
double d_modelPar_PCFD_dX;
bool modelPar_given_PCFD;
double modelPar_LCOVS;
double d_modelPar_LCOVS_dX;
bool modelPar_given_LCOVS;
double modelPar_NCOVS;
double d_modelPar_NCOVS_dX;
bool modelPar_given_NCOVS;
double modelPar_PCOVS;
double d_modelPar_PCOVS_dX;
bool modelPar_given_PCOVS;
double modelPar_LCOVD;
double d_modelPar_LCOVD_dX;
bool modelPar_given_LCOVD;
double modelPar_NCOVD;
double d_modelPar_NCOVD_dX;
bool modelPar_given_NCOVD;
double modelPar_PCOVD;
double d_modelPar_PCOVD_dX;
bool modelPar_given_PCOVD;
double modelPar_LCGSL;
double d_modelPar_LCGSL_dX;
bool modelPar_given_LCGSL;
double modelPar_NCGSL;
double d_modelPar_NCGSL_dX;
bool modelPar_given_NCGSL;
double modelPar_PCGSL;
double d_modelPar_PCGSL_dX;
bool modelPar_given_PCGSL;
double modelPar_LCGDL;
double d_modelPar_LCGDL_dX;
bool modelPar_given_LCGDL;
double modelPar_NCGDL;
double d_modelPar_NCGDL_dX;
bool modelPar_given_NCGDL;
double modelPar_PCGDL;
double d_modelPar_PCGDL_dX;
bool modelPar_given_PCGDL;
double modelPar_LCKAPPAS;
double d_modelPar_LCKAPPAS_dX;
bool modelPar_given_LCKAPPAS;
double modelPar_NCKAPPAS;
double d_modelPar_NCKAPPAS_dX;
bool modelPar_given_NCKAPPAS;
double modelPar_PCKAPPAS;
double d_modelPar_PCKAPPAS_dX;
bool modelPar_given_PCKAPPAS;
double modelPar_LCKAPPAD;
double d_modelPar_LCKAPPAD_dX;
bool modelPar_given_LCKAPPAD;
double modelPar_NCKAPPAD;
double d_modelPar_NCKAPPAD_dX;
bool modelPar_given_NCKAPPAD;
double modelPar_PCKAPPAD;
double d_modelPar_PCKAPPAD_dX;
bool modelPar_given_PCKAPPAD;
double modelPar_LCGBL;
double d_modelPar_LCGBL_dX;
bool modelPar_given_LCGBL;
double modelPar_NCGBL;
double d_modelPar_NCGBL_dX;
bool modelPar_given_NCGBL;
double modelPar_PCGBL;
double d_modelPar_PCGBL_dX;
bool modelPar_given_PCGBL;
double modelPar_LCKAPPAB;
double d_modelPar_LCKAPPAB_dX;
bool modelPar_given_LCKAPPAB;
double modelPar_NCKAPPAB;
double d_modelPar_NCKAPPAB_dX;
bool modelPar_given_NCKAPPAB;
double modelPar_PCKAPPAB;
double d_modelPar_PCKAPPAB_dX;
bool modelPar_given_PCKAPPAB;
double modelPar_LNTGEN;
double d_modelPar_LNTGEN_dX;
bool modelPar_given_LNTGEN;
double modelPar_NNTGEN;
double d_modelPar_NNTGEN_dX;
bool modelPar_given_NNTGEN;
double modelPar_PNTGEN;
double d_modelPar_PNTGEN_dX;
bool modelPar_given_PNTGEN;
double modelPar_LAIGEN;
double d_modelPar_LAIGEN_dX;
bool modelPar_given_LAIGEN;
double modelPar_NAIGEN;
double d_modelPar_NAIGEN_dX;
bool modelPar_given_NAIGEN;
double modelPar_PAIGEN;
double d_modelPar_PAIGEN_dX;
bool modelPar_given_PAIGEN;
double modelPar_LBIGEN;
double d_modelPar_LBIGEN_dX;
bool modelPar_given_LBIGEN;
double modelPar_NBIGEN;
double d_modelPar_NBIGEN_dX;
bool modelPar_given_NBIGEN;
double modelPar_PBIGEN;
double d_modelPar_PBIGEN_dX;
bool modelPar_given_PBIGEN;
double modelPar_LXRCRG1;
double d_modelPar_LXRCRG1_dX;
bool modelPar_given_LXRCRG1;
double modelPar_NXRCRG1;
double d_modelPar_NXRCRG1_dX;
bool modelPar_given_NXRCRG1;
double modelPar_PXRCRG1;
double d_modelPar_PXRCRG1_dX;
bool modelPar_given_PXRCRG1;
double modelPar_LXRCRG2;
double d_modelPar_LXRCRG2_dX;
bool modelPar_given_LXRCRG2;
double modelPar_NXRCRG2;
double d_modelPar_NXRCRG2_dX;
bool modelPar_given_NXRCRG2;
double modelPar_PXRCRG2;
double d_modelPar_PXRCRG2_dX;
bool modelPar_given_PXRCRG2;
double modelPar_LINTNOI;
double d_modelPar_LINTNOI_dX;
bool modelPar_given_LINTNOI;
double modelPar_LUTE;
double d_modelPar_LUTE_dX;
bool modelPar_given_LUTE;
double modelPar_NUTE;
double d_modelPar_NUTE_dX;
bool modelPar_given_NUTE;
double modelPar_PUTE;
double d_modelPar_PUTE_dX;
bool modelPar_given_PUTE;
double modelPar_LUTL;
double d_modelPar_LUTL_dX;
bool modelPar_given_LUTL;
double modelPar_NUTL;
double d_modelPar_NUTL_dX;
bool modelPar_given_NUTL;
double modelPar_PUTL;
double d_modelPar_PUTL_dX;
bool modelPar_given_PUTL;
double modelPar_LEMOBT;
double d_modelPar_LEMOBT_dX;
bool modelPar_given_LEMOBT;
double modelPar_NEMOBT;
double d_modelPar_NEMOBT_dX;
bool modelPar_given_NEMOBT;
double modelPar_PEMOBT;
double d_modelPar_PEMOBT_dX;
bool modelPar_given_PEMOBT;
double modelPar_LUA1;
double d_modelPar_LUA1_dX;
bool modelPar_given_LUA1;
double modelPar_NUA1;
double d_modelPar_NUA1_dX;
bool modelPar_given_NUA1;
double modelPar_PUA1;
double d_modelPar_PUA1_dX;
bool modelPar_given_PUA1;
double modelPar_LUC1;
double d_modelPar_LUC1_dX;
bool modelPar_given_LUC1;
double modelPar_NUC1;
double d_modelPar_NUC1_dX;
bool modelPar_given_NUC1;
double modelPar_PUC1;
double d_modelPar_PUC1_dX;
bool modelPar_given_PUC1;
double modelPar_LUD1;
double d_modelPar_LUD1_dX;
bool modelPar_given_LUD1;
double modelPar_NUD1;
double d_modelPar_NUD1_dX;
bool modelPar_given_NUD1;
double modelPar_PUD1;
double d_modelPar_PUD1_dX;
bool modelPar_given_PUD1;
double modelPar_LUCSTE;
double d_modelPar_LUCSTE_dX;
bool modelPar_given_LUCSTE;
double modelPar_NUCSTE;
double d_modelPar_NUCSTE_dX;
bool modelPar_given_NUCSTE;
double modelPar_PUCSTE;
double d_modelPar_PUCSTE_dX;
bool modelPar_given_PUCSTE;
double modelPar_LPTWGT;
double d_modelPar_LPTWGT_dX;
bool modelPar_given_LPTWGT;
double modelPar_NPTWGT;
double d_modelPar_NPTWGT_dX;
bool modelPar_given_NPTWGT;
double modelPar_PPTWGT;
double d_modelPar_PPTWGT_dX;
bool modelPar_given_PPTWGT;
double modelPar_LAT;
double d_modelPar_LAT_dX;
bool modelPar_given_LAT;
double modelPar_NAT;
double d_modelPar_NAT_dX;
bool modelPar_given_NAT;
double modelPar_PAT;
double d_modelPar_PAT_dX;
bool modelPar_given_PAT;
double modelPar_LSTTHETASAT;
double d_modelPar_LSTTHETASAT_dX;
bool modelPar_given_LSTTHETASAT;
double modelPar_NSTTHETASAT;
double d_modelPar_NSTTHETASAT_dX;
bool modelPar_given_NSTTHETASAT;
double modelPar_PSTTHETASAT;
double d_modelPar_PSTTHETASAT_dX;
bool modelPar_given_PSTTHETASAT;
double modelPar_LPRT;
double d_modelPar_LPRT_dX;
bool modelPar_given_LPRT;
double modelPar_NPRT;
double d_modelPar_NPRT_dX;
bool modelPar_given_NPRT;
double modelPar_PPRT;
double d_modelPar_PPRT_dX;
bool modelPar_given_PPRT;
double modelPar_LKT1;
double d_modelPar_LKT1_dX;
bool modelPar_given_LKT1;
double modelPar_NKT1;
double d_modelPar_NKT1_dX;
bool modelPar_given_NKT1;
double modelPar_PKT1;
double d_modelPar_PKT1_dX;
bool modelPar_given_PKT1;
double modelPar_LTSS;
double d_modelPar_LTSS_dX;
bool modelPar_given_LTSS;
double modelPar_NTSS;
double d_modelPar_NTSS_dX;
bool modelPar_given_NTSS;
double modelPar_PTSS;
double d_modelPar_PTSS_dX;
bool modelPar_given_PTSS;
double modelPar_LIIT;
double d_modelPar_LIIT_dX;
bool modelPar_given_LIIT;
double modelPar_NIIT;
double d_modelPar_NIIT_dX;
bool modelPar_given_NIIT;
double modelPar_PIIT;
double d_modelPar_PIIT_dX;
bool modelPar_given_PIIT;
double modelPar_LTII;
double d_modelPar_LTII_dX;
bool modelPar_given_LTII;
double modelPar_NTII;
double d_modelPar_NTII_dX;
bool modelPar_given_NTII;
double modelPar_PTII;
double d_modelPar_PTII_dX;
bool modelPar_given_PTII;
double modelPar_LTGIDL;
double d_modelPar_LTGIDL_dX;
bool modelPar_given_LTGIDL;
double modelPar_NTGIDL;
double d_modelPar_NTGIDL_dX;
bool modelPar_given_NTGIDL;
double modelPar_PTGIDL;
double d_modelPar_PTGIDL_dX;
bool modelPar_given_PTGIDL;
double modelPar_LIGT;
double d_modelPar_LIGT_dX;
bool modelPar_given_LIGT;
double modelPar_NIGT;
double d_modelPar_NIGT_dX;
bool modelPar_given_NIGT;
double modelPar_PIGT;
double d_modelPar_PIGT_dX;
bool modelPar_given_PIGT;
// non-reals (including hidden)
int modelPar_NF;
bool modelPar_given_NF;
int modelPar_NGCON;
bool modelPar_given_NGCON;
int modelPar_DEVTYPE;
bool modelPar_given_DEVTYPE;
int modelPar_BULKMOD;
bool modelPar_given_BULKMOD;
int modelPar_COREMOD;
bool modelPar_given_COREMOD;
int modelPar_GEOMOD;
bool modelPar_given_GEOMOD;
int modelPar_CGEO1SW;
bool modelPar_given_CGEO1SW;
int modelPar_RDSMOD;
bool modelPar_given_RDSMOD;
int modelPar_ASYMMOD;
bool modelPar_given_ASYMMOD;
int modelPar_IGCMOD;
bool modelPar_given_IGCMOD;
int modelPar_IGBMOD;
bool modelPar_given_IGBMOD;
int modelPar_GIDLMOD;
bool modelPar_given_GIDLMOD;
int modelPar_IIMOD;
bool modelPar_given_IIMOD;
int modelPar_NQSMOD;
bool modelPar_given_NQSMOD;
int modelPar_SHMOD;
bool modelPar_given_SHMOD;
int modelPar_RGATEMOD;
bool modelPar_given_RGATEMOD;
int modelPar_RGEOMOD;
bool modelPar_given_RGEOMOD;
int modelPar_CGEOMOD;
bool modelPar_given_CGEOMOD;
int modelPar_CAPMOD;
bool modelPar_given_CAPMOD;
int modelPar_SDTERM;
bool modelPar_given_SDTERM;
int modelPar_NSEG;
bool modelPar_given_NSEG;
};



//-----------------------------------------------------------------------------
// Free functions used by sensitivity
//
//-----------------------------------------------------------------------------
void evaluateModelEquations(
std::vector <double> & probeVars,
// probe constants
const int admsProbeID_V_si_GND,
const int admsProbeID_V_e_GND,
const int admsProbeID_V_di_GND,
const int admsProbeID_V_g_GND,
const int admsProbeID_V_s_si,
const int admsProbeID_V_d_di,
const int admsProbeID_V_e_g,
const int admsProbeID_V_d_s,
const int admsProbeID_V_g_d,
const int admsProbeID_V_g_s,
const int admsProbeID_V_di_d,
const int admsProbeID_V_si_s,
const int admsProbeID_V_g_e,
const int admsProbeID_V_e_di,
const int admsProbeID_V_e_si,
const int admsProbeID_V_g_di,
const int admsProbeID_V_di_si,
const int admsProbeID_V_g_si,
// node constants
const int admsNodeID_d,
const int admsNodeID_g,
const int admsNodeID_s,
const int admsNodeID_e,
const int admsNodeID_di,
const int admsNodeID_si,
instanceSensStruct & instanceStruct,
modelSensStruct & modelStruct,
// basic variables
 double admsTemperature, double adms_vt_nom, double ADMSgmin_arg, std::vector <double> & d_staticContributions_dX, std::vector <double> & d_dynamicContributions_dX, const Instance & theInstance);

void evaluateInitialInstance(
instanceSensStruct & instanceStruct,
modelSensStruct & modelStruct,
 double admsTemperature,double adms_vt_nom, double ADMSgmin_arg, const Instance & theInstance);

void evaluateInitialModel(
modelSensStruct & modelStruct,
 double admsTemperature, double ADMSgmin_arg, const Instance & theInstance);

#endif // Xyce_ADMS_SENSITIVITIES


// Limited exponential --- NOT what verilog LRM says, but what qucs,
// ng-spice, and zspice do.

template <typename T>
T limexp(const T &x)
{
  if ((x) < 80.0)
  return (exp(x));
  else
  return (exp(80.0)*(x-79.0));
}


struct Traits: public DeviceTraits<Model, Instance, MOSFET1::Traits>
{
  static const char *name() {return "BSIM-CMG FINFET v107.0.0";}
  static const char *deviceTypeName() {return "M level 107";}

  static int numNodes() {return 4;}


  static bool modelRequired() {return true;}
  static bool isLinearDevice() {return false;}

  static Device *factory(const Configuration &configuration, const FactoryBlock &factory_block);
  static void loadModelParameters(ParametricData<Model> &model_parameters);
  static void loadInstanceParameters(ParametricData<Instance> &instance_parameters);
};

//-----------------------------------------------------------------------------
// Class         : Instance

//
// Purpose       : This class represents a single instance  of the
//                 device.  It mainly contains indices and pointers into
//                 the matrix equation (see the resistor instance class for
//                 more details).
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Instance : public DeviceInstance
{
  friend class ParametricData<Instance>;
  friend class Model;
#ifdef Xyce_ADMS_SENSITIVITIES
  friend class InstanceSensitivity;
  friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
  friend struct Traits;

  public:
    Instance(
      const Configuration &       configuration,
      const InstanceBlock &       instance_block,
      Model &                     model,
      const FactoryBlock &        factory_block);

    ~Instance();

private:
    Instance(const Instance &);
    Instance &operator=(const Instance &);

public:
    void registerLIDs( const LocalIdVector & intLIDVecRef,
                       const LocalIdVector & extLIDVecRef );
    void registerStoreLIDs( const LocalIdVector & stoLIDVecRef );
    void setupPointers();

    void loadNodeSymbols(Util::SymbolTable &symbol_table) const;

    const JacobianStamp & jacobianStamp() const;
    void registerJacLIDs( const JacobianStamp & jacLIDVec );

    void registerBranchDataLIDs(const std::vector<int> & branchLIDVecRef);

    bool processParams();
    bool updateTemperature ( const double & temp = -999.0 );
    bool updateIntermediateVars ();
    bool updatePrimaryState ();
    bool updateSecondaryState ();

    // load functions, residual:
    bool loadDAEQVector ();
    bool loadDAEFVector ();

    // load functions, Jacobian:
    bool loadDAEdQdx ();
    bool loadDAEdFdx ();

      int getNumNoiseSources () const;  // 11
      void setupNoiseSources (Xyce::Analysis::NoiseData & noiseData);
      void getNoiseSources (Xyce::Analysis::NoiseData & noiseData);

  private:

  public:
    // iterator reference to the bsimcmg model which owns this instance.
    // Getters and setters
    Model &getModel()
    {
      return model_;
    }

  private:

    Model & model_;   //< Owning Model
    // Begin verilog Instance Variables
    //   Instance Parameters
    double L;
    double D;
    double TFIN;
    double FPITCH;
    double NFIN;
    int NGCON;
    double ASEO;
    double ADEO;
    double PSEO;
    double PDEO;
    double ASEJ;
    double ADEJ;
    double PSEJ;
    double PDEJ;
    double COVS;
    double COVD;
    double CGSP;
    double CGDP;
    double CDSP;
    double NRS;
    double NRD;
    double LRSD;
    double DELVTRAND;
    double U0MULT;
    //  Variables of global_instance scope
    double WEFF;
    double LEFF;
    double WEFFCV;
    double LEFFCV;
    double IDS;
     double d_IDS_dV_e_si;
     double d_IDS_dV_e_di;
     double d_IDS_dV_g_e;
     double d_IDS_dV_g_si;
     double d_IDS_dV_di_si;
     double d_IDS_dV_g_di;
    double IDEFF;
    double ISEFF;
    double IGTOT;
    double IDSGEN;
    double III;
    double IGIDL;
    double IGISL;
    double IJSB;
    double IJDB;
    double ISUB;
    double BETA;
    double VTH;
    double VDSSAT;
    double VFB;
    double GM;
    double GDS;
    double GMBS;
    double QGI;
     double d_QGI_dV_di_si;
     double d_QGI_dV_e_si;
     double d_QGI_dV_e_di;
     double d_QGI_dV_g_e;
     double d_QGI_dV_g_si;
     double d_QGI_dV_g_di;
    double QDI;
     double d_QDI_dV_di_si;
     double d_QDI_dV_e_si;
     double d_QDI_dV_e_di;
     double d_QDI_dV_g_e;
     double d_QDI_dV_g_si;
     double d_QDI_dV_g_di;
    double QSI;
     double d_QSI_dV_di_si;
     double d_QSI_dV_e_si;
     double d_QSI_dV_e_di;
     double d_QSI_dV_g_e;
     double d_QSI_dV_g_si;
     double d_QSI_dV_g_di;
    double QBI;
     double d_QBI_dV_e_si;
     double d_QBI_dV_e_di;
     double d_QBI_dV_g_e;
     double d_QBI_dV_g_si;
     double d_QBI_dV_di_si;
     double d_QBI_dV_g_di;
    double QG;
     double d_QG_dV_di_si;
     double d_QG_dV_e_si;
     double d_QG_dV_e_di;
     double d_QG_dV_g_e;
     double d_QG_dV_g_si;
     double d_QG_dV_g_di;
     double d_QG_dV_g_s;
     double d_QG_dV_g_d;
     double d_QG_dV_e_g;
    double QD;
     double d_QD_dV_di_si;
     double d_QD_dV_e_si;
     double d_QD_dV_e_di;
     double d_QD_dV_g_e;
     double d_QD_dV_g_si;
     double d_QD_dV_g_di;
     double d_QD_dV_g_d;
     double d_QD_dV_di_d;
     double d_QD_dV_si_s;
    double QS;
     double d_QS_dV_di_si;
     double d_QS_dV_e_si;
     double d_QS_dV_e_di;
     double d_QS_dV_g_e;
     double d_QS_dV_g_si;
     double d_QS_dV_g_di;
     double d_QS_dV_g_s;
     double d_QS_dV_di_d;
     double d_QS_dV_si_s;
    double QB;
     double d_QB_dV_e_si;
     double d_QB_dV_e_di;
     double d_QB_dV_g_e;
     double d_QB_dV_g_si;
     double d_QB_dV_di_si;
     double d_QB_dV_g_di;
     double d_QB_dV_e_g;
     double d_QB_dV_di_d;
     double d_QB_dV_si_s;
    double CGGI;
    double CGSI;
    double CGDI;
    double CGEI;
    double CDGI;
    double CDDI;
    double CDSI;
    double CDEI;
    double CSGI;
    double CSDI;
    double CSSI;
    double CSEI;
    double CEGI;
    double CEDI;
    double CESI;
    double CEEI;
    double CGG;
    double CGS;
    double CGD;
    double CGE;
    double CDG;
    double CDD;
    double CDS;
    double CDE;
    double CSG;
    double CSD;
    double CSS;
    double CSE;
    double CEG;
    double CED;
    double CES;
    double CEE;
    double CGSEXT;
    double CGDEXT;
    double CGBOV;
    double CJST;
    double CJDT;
    double RSGEO;
    double RDGEO;
    double CFGEO;
    // end verilog Instance Variables=====
    // Nodal LID Variables
    int li_d;
    int li_g;
    int li_s;
    int li_e;
    int li_di;
    int li_si;
    // end Nodal LID Variables
    // Branch LID Variables
    // end Branch LID Variables
    // Lead (branch) LID Variables
    int li_branch_id;
    int li_branch_ig;
    int li_branch_is;
    int li_branch_ie;
    // end Lead (branch) LID Variables
    // Jacobian  pointers
    double * f_di_Equ_g_Node_Ptr;
    double * f_di_Equ_di_Node_Ptr;
    double * f_si_Equ_g_Node_Ptr;
    double * f_si_Equ_di_Node_Ptr;
    double * f_di_Equ_si_Node_Ptr;
    double * f_si_Equ_si_Node_Ptr;
    double * f_di_Equ_e_Node_Ptr;
    double * f_si_Equ_e_Node_Ptr;
    double * f_g_Equ_g_Node_Ptr;
    double * f_g_Equ_di_Node_Ptr;
    double * f_g_Equ_si_Node_Ptr;
    double * f_g_Equ_e_Node_Ptr;
    double * f_g_Equ_s_Node_Ptr;
    double * f_si_Equ_s_Node_Ptr;
    double * f_g_Equ_d_Node_Ptr;
    double * f_si_Equ_d_Node_Ptr;
    double * f_di_Equ_s_Node_Ptr;
    double * f_di_Equ_d_Node_Ptr;
    double * f_e_Equ_g_Node_Ptr;
    double * f_e_Equ_e_Node_Ptr;
    double * f_e_Equ_di_Node_Ptr;
    double * f_e_Equ_si_Node_Ptr;
    double * f_e_Equ_s_Node_Ptr;
    double * f_e_Equ_d_Node_Ptr;
    double * f_d_Equ_d_Node_Ptr;
    double * f_d_Equ_s_Node_Ptr;
    double * f_s_Equ_d_Node_Ptr;
    double * f_s_Equ_s_Node_Ptr;
    double * f_s_Equ_di_Node_Ptr;
    double * f_s_Equ_si_Node_Ptr;
    double * f_s_Equ_g_Node_Ptr;
    double * f_s_Equ_e_Node_Ptr;
    double * f_d_Equ_di_Node_Ptr;
    double * f_d_Equ_si_Node_Ptr;
    double * f_d_Equ_g_Node_Ptr;
    double * f_d_Equ_e_Node_Ptr;
    double * q_di_Equ_g_Node_Ptr;
    double * q_di_Equ_di_Node_Ptr;
    double * q_si_Equ_g_Node_Ptr;
    double * q_si_Equ_di_Node_Ptr;
    double * q_di_Equ_si_Node_Ptr;
    double * q_si_Equ_si_Node_Ptr;
    double * q_di_Equ_e_Node_Ptr;
    double * q_si_Equ_e_Node_Ptr;
    double * q_g_Equ_g_Node_Ptr;
    double * q_g_Equ_di_Node_Ptr;
    double * q_g_Equ_si_Node_Ptr;
    double * q_g_Equ_e_Node_Ptr;
    double * q_g_Equ_s_Node_Ptr;
    double * q_si_Equ_s_Node_Ptr;
    double * q_g_Equ_d_Node_Ptr;
    double * q_si_Equ_d_Node_Ptr;
    double * q_di_Equ_s_Node_Ptr;
    double * q_di_Equ_d_Node_Ptr;
    double * q_e_Equ_g_Node_Ptr;
    double * q_e_Equ_e_Node_Ptr;
    double * q_e_Equ_di_Node_Ptr;
    double * q_e_Equ_si_Node_Ptr;
    double * q_e_Equ_s_Node_Ptr;
    double * q_e_Equ_d_Node_Ptr;
    double * q_d_Equ_d_Node_Ptr;
    double * q_d_Equ_s_Node_Ptr;
    double * q_s_Equ_d_Node_Ptr;
    double * q_s_Equ_s_Node_Ptr;
    double * q_s_Equ_di_Node_Ptr;
    double * q_s_Equ_si_Node_Ptr;
    double * q_s_Equ_g_Node_Ptr;
    double * q_s_Equ_e_Node_Ptr;
    double * q_d_Equ_di_Node_Ptr;
    double * q_d_Equ_si_Node_Ptr;
    double * q_d_Equ_g_Node_Ptr;
    double * q_d_Equ_e_Node_Ptr;
    // Jacobian offsets
    int A_di_Equ_g_NodeOffset;
    int A_di_Equ_di_NodeOffset;
    int A_si_Equ_g_NodeOffset;
    int A_si_Equ_di_NodeOffset;
    int A_di_Equ_si_NodeOffset;
    int A_si_Equ_si_NodeOffset;
    int A_di_Equ_e_NodeOffset;
    int A_si_Equ_e_NodeOffset;
    int A_g_Equ_g_NodeOffset;
    int A_g_Equ_di_NodeOffset;
    int A_g_Equ_si_NodeOffset;
    int A_g_Equ_e_NodeOffset;
    int A_g_Equ_s_NodeOffset;
    int A_si_Equ_s_NodeOffset;
    int A_g_Equ_d_NodeOffset;
    int A_si_Equ_d_NodeOffset;
    int A_di_Equ_s_NodeOffset;
    int A_di_Equ_d_NodeOffset;
    int A_e_Equ_g_NodeOffset;
    int A_e_Equ_e_NodeOffset;
    int A_e_Equ_di_NodeOffset;
    int A_e_Equ_si_NodeOffset;
    int A_e_Equ_s_NodeOffset;
    int A_e_Equ_d_NodeOffset;
    int A_d_Equ_d_NodeOffset;
    int A_d_Equ_s_NodeOffset;
    int A_s_Equ_d_NodeOffset;
    int A_s_Equ_s_NodeOffset;
    int A_s_Equ_di_NodeOffset;
    int A_s_Equ_si_NodeOffset;
    int A_s_Equ_g_NodeOffset;
    int A_s_Equ_e_NodeOffset;
    int A_d_Equ_di_NodeOffset;
    int A_d_Equ_si_NodeOffset;
    int A_d_Equ_g_NodeOffset;
    int A_d_Equ_e_NodeOffset;
    // end of Jacobian and pointers
   // node numbers
    static const int admsNodeID_d = 0;
    static const int admsNodeID_g = 1;
    static const int admsNodeID_s = 2;
    static const int admsNodeID_e = 3;
    static const int admsNodeID_di = 0+4;
    static const int admsNodeID_si = 1+4;
    static const int admsNodeID_GND = -1;
   // end node numbers
   // Additional IDs for branch equations
   // end branch numbers
   // Probe numbers
    static const int admsProbeID_V_si_GND = 0;
    static const int admsProbeID_V_e_GND = 1;
    static const int admsProbeID_V_di_GND = 2;
    static const int admsProbeID_V_g_GND = 3;
    static const int admsProbeID_V_s_si = 4;
    static const int admsProbeID_V_d_di = 5;
    static const int admsProbeID_V_e_g = 6;
    static const int admsProbeID_V_d_s = 7;
    static const int admsProbeID_V_g_d = 8;
    static const int admsProbeID_V_g_s = 9;
    static const int admsProbeID_V_di_d = 10;
    static const int admsProbeID_V_si_s = 11;
    static const int admsProbeID_V_g_e = 12;
    static const int admsProbeID_V_e_di = 13;
    static const int admsProbeID_V_e_si = 14;
    static const int admsProbeID_V_g_di = 15;
    static const int admsProbeID_V_di_si = 16;
    static const int admsProbeID_V_g_si = 17;
   // end probe numbers
   // Store LIDs
   // end store LIDs
   // Store LIDs for output vars
    int li_store_WEFF;
    int li_store_LEFF;
    int li_store_WEFFCV;
    int li_store_LEFFCV;
    int li_store_IDS;
    int li_store_IDEFF;
    int li_store_ISEFF;
    int li_store_IGTOT;
    int li_store_IDSGEN;
    int li_store_III;
    int li_store_IGIDL;
    int li_store_IGISL;
    int li_store_IJSB;
    int li_store_IJDB;
    int li_store_ISUB;
    int li_store_BETA;
    int li_store_VTH;
    int li_store_VDSSAT;
    int li_store_VFB;
    int li_store_GM;
    int li_store_GDS;
    int li_store_GMBS;
    int li_store_QGI;
    int li_store_QDI;
    int li_store_QSI;
    int li_store_QBI;
    int li_store_QG;
    int li_store_QD;
    int li_store_QS;
    int li_store_QB;
    int li_store_CGGI;
    int li_store_CGSI;
    int li_store_CGDI;
    int li_store_CGEI;
    int li_store_CDGI;
    int li_store_CDDI;
    int li_store_CDSI;
    int li_store_CDEI;
    int li_store_CSGI;
    int li_store_CSDI;
    int li_store_CSSI;
    int li_store_CSEI;
    int li_store_CEGI;
    int li_store_CEDI;
    int li_store_CESI;
    int li_store_CEEI;
    int li_store_CGG;
    int li_store_CGS;
    int li_store_CGD;
    int li_store_CGE;
    int li_store_CDG;
    int li_store_CDD;
    int li_store_CDS;
    int li_store_CDE;
    int li_store_CSG;
    int li_store_CSD;
    int li_store_CSS;
    int li_store_CSE;
    int li_store_CEG;
    int li_store_CED;
    int li_store_CES;
    int li_store_CEE;
    int li_store_CGSEXT;
    int li_store_CGDEXT;
    int li_store_CGBOV;
    int li_store_CJST;
    int li_store_CJDT;
    int li_store_RSGEO;
    int li_store_RDGEO;
    int li_store_CFGEO;
   // end store LIDs for output vars
 // Arrays to hold probes
 std::vector < double > probeVars;
 std::vector < std::vector < double > > d_probeVars;
 // Arrays to hold contributions
 // dynamic contributions are differentiated w.r.t time
 std::vector < double > staticContributions;
 std::vector < std::vector < double > > d_staticContributions;
 std::vector < double > dynamicContributions;
 std::vector < std::vector < double > > d_dynamicContributions;
//vectors to hold noise information for communication between methods
std::vector<double> noiseContribsPower;
std::vector<double> noiseContribsExponent;


    // this is what we'll use when any model uses $temperature.  We'll
    // set it in updateTemperature, and initialize it to whatever
    // is in devOptions when the instance is constructed.
    double admsTemperature;

    // vt at $temperature;
    double adms_vt_nom;


    // This one is for the annoying bogus "XyceADMSInstTemp" parameter
    // that we need so we can set it from the device manager when there's no
    // "TEMP" parameter to use
    double admsInstTemp;


    static JacobianStamp jacStamp;
    static IdVector nodeMap;
    static PairMap pairToJacStampMap;

    // These instance-owned vectors are for storage of lead current data
    std::vector<double> leadCurrentF;
    std::vector<double> leadCurrentQ;


    };



namespace AnalogFunctions
{

      // Analog Function lexp
double lexp(double x);
// Derivative of Analog Function lexp
double d_lexp(double x  , double d_x  );
// Evaluator class for Analog Function lexp
class lexpEvaluator
{
  struct returnType
  {
     double value;
     double deriv_WRT_x;
  };
public:
  // constructor takes all same arguments as regular templated function,
  // even though it doesn't USE the output args
  lexpEvaluator(double x);
  // function that returns the precomputed values.  This, too, takes
  // all the same arguments as the regular function, though it ONLY
  // uses the output arguments
  double getValues(double  x);
  // function that returns the total derivative of the function and its
  // output arguments with respect to some variable.  We pass in the
  // normal arguments(none of which are used) and the derivatives of those
  // arguments with respect to the desired variable.  We compute the
  // derivatives using the chain rule and our precomputed derivatives
  // with respect to input variables
double getDerivs(double x  , double d_x);
private:
  returnType lexpReturn_;
  returnType evaluator_(double x);
};


      // Analog Function lln
double lln(double x);
// Derivative of Analog Function lln
double d_lln(double x  , double d_x  );
// Evaluator class for Analog Function lln
class llnEvaluator
{
  struct returnType
  {
     double value;
     double deriv_WRT_x;
  };
public:
  // constructor takes all same arguments as regular templated function,
  // even though it doesn't USE the output args
  llnEvaluator(double x);
  // function that returns the precomputed values.  This, too, takes
  // all the same arguments as the regular function, though it ONLY
  // uses the output arguments
  double getValues(double  x);
  // function that returns the total derivative of the function and its
  // output arguments with respect to some variable.  We pass in the
  // normal arguments(none of which are used) and the derivatives of those
  // arguments with respect to the desired variable.  We compute the
  // derivatives using the chain rule and our precomputed derivatives
  // with respect to input variables
double getDerivs(double x  , double d_x);
private:
  returnType llnReturn_;
  returnType evaluator_(double x);
};


      // Analog Function hypsmooth
double hypsmooth(double x, double c);
// Derivative of Analog Function hypsmooth
double d_hypsmooth(double x , double c  , double d_x  , double d_c  );
// Evaluator class for Analog Function hypsmooth
class hypsmoothEvaluator
{
  struct returnType
  {
     double value;
     double deriv_WRT_x;
     double deriv_WRT_c;
  };
public:
  // constructor takes all same arguments as regular templated function,
  // even though it doesn't USE the output args
  hypsmoothEvaluator(double x, double c);
  // function that returns the precomputed values.  This, too, takes
  // all the same arguments as the regular function, though it ONLY
  // uses the output arguments
  double getValues(double  x, double  c);
  // function that returns the total derivative of the function and its
  // output arguments with respect to some variable.  We pass in the
  // normal arguments(none of which are used) and the derivatives of those
  // arguments with respect to the desired variable.  We compute the
  // derivatives using the chain rule and our precomputed derivatives
  // with respect to input variables
double getDerivs(double x , double c  , double d_x, double d_c);
private:
  returnType hypsmoothReturn_;
  returnType evaluator_(double x, double c);
};


      // Analog Function hypmax
double hypmax(double x, double xmin, double c);
// Derivative of Analog Function hypmax
double d_hypmax(double x , double xmin , double c  , double d_x  , double d_xmin  , double d_c  );
// Evaluator class for Analog Function hypmax
class hypmaxEvaluator
{
  struct returnType
  {
     double value;
     double deriv_WRT_x;
     double deriv_WRT_xmin;
     double deriv_WRT_c;
  };
public:
  // constructor takes all same arguments as regular templated function,
  // even though it doesn't USE the output args
  hypmaxEvaluator(double x, double xmin, double c);
  // function that returns the precomputed values.  This, too, takes
  // all the same arguments as the regular function, though it ONLY
  // uses the output arguments
  double getValues(double  x, double  xmin, double  c);
  // function that returns the total derivative of the function and its
  // output arguments with respect to some variable.  We pass in the
  // normal arguments(none of which are used) and the derivatives of those
  // arguments with respect to the desired variable.  We compute the
  // derivatives using the chain rule and our precomputed derivatives
  // with respect to input variables
double getDerivs(double x , double xmin , double c  , double d_x, double d_xmin, double d_c);
private:
  returnType hypmaxReturn_;
  returnType evaluator_(double x, double xmin, double c);
};

}


//-----------------------------------------------------------------------------
// Class         : Model

// Purpose       :
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Model : public DeviceModel
{
    typedef std::vector<Instance *> InstanceVector;

    friend class ParametricData<Model>;
    friend class Instance;
#ifdef Xyce_ADMS_SENSITIVITIES
    friend class InstanceSensitivity;
    friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
    friend struct Traits;

  public:
    Model(
      const Configuration &       configuration,
      const ModelBlock &          model_block,
      const FactoryBlock &        factory_block);

    ~Model();

private:
    Model(const Model &);
    Model &operator=(const Model &);

public:
    virtual void forEachInstance(DeviceInstanceOp &op) const /* override */;
    virtual std::ostream &printOutInstances(std::ostream &os) const;
    bool processParams();
    bool processInstanceParams();

  private:

  public:
    void addInstance(Instance *instance)
    {
      instanceContainer.push_back(instance);
    }

    void setupBaseInstanceContainer()
    {
      std::vector<Instance*>::iterator iter = instanceContainer.begin();
      std::vector<Instance*>::iterator end   = instanceContainer.end();
      for ( ; iter!=end; ++iter)
      {
      Xyce::Device::DeviceModel::baseInstanceContainer.push_back( static_cast<Xyce::Device::DeviceInstance *>(*iter) );
    }
  }

  private:
    std::vector<Instance*> instanceContainer;

  private:

    // This one is for the annoying bogus "XyceADMSInstTemp" parameter
    // that we need so we can set it from the device manager when there's no
    // "TEMP" model parameter to use
    double admsModTemp;
// Begin verilog Model Variables
//   Model Parameters
    double L;
    double D;
    double TFIN;
    double FPITCH;
    int NF;
    double NFIN;
    int NGCON;
    double ASEO;
    double ADEO;
    double PSEO;
    double PDEO;
    double ASEJ;
    double ADEJ;
    double PSEJ;
    double PDEJ;
    double COVS;
    double COVD;
    double CGSP;
    double CGDP;
    double CDSP;
    double NRS;
    double NRD;
    double LRSD;
    double XL;
    double DTEMP;
    double DELVTRAND;
    double U0MULT;
    double IDS0MULT;
    int DEVTYPE;
    int BULKMOD;
    int COREMOD;
    int GEOMOD;
    int CGEO1SW;
    int RDSMOD;
    int ASYMMOD;
    int IGCMOD;
    int IGBMOD;
    int GIDLMOD;
    int IIMOD;
    int NQSMOD;
    int SHMOD;
    int RGATEMOD;
    int RGEOMOD;
    int CGEOMOD;
    int CAPMOD;
    double LINT;
    double LL;
    double LLN;
    double DLC;
    double DLCACC;
    double DLBIN;
    double LLC;
    double EOT;
    double TOXP;
    double EOTBOX;
    double HFIN;
    double FECH;
    double DELTAW;
    double FECHCV;
    double DELTAWCV;
    double NBODY;
    double NBODYN1;
    double NBODYN2;
    double NSD;
    double PHIG;
    double PHIGL;
    double PHIGN1;
    double PHIGN2;
    double EPSROX;
    double EPSRSUB;
    double EASUB;
    double NI0SUB;
    double BG0SUB;
    double NC0SUB;
    double NGATE;
    double Imin;
    double CIT;
    double CDSC;
    double CDSCN1;
    double CDSCN2;
    double CDSCD;
    double CDSCDN1;
    double CDSCDN2;
    double CDSCDR;
    double CDSCDRN1;
    double CDSCDRN2;
    double DVT0;
    double DVT1;
    double DVT1SS;
    double PHIN;
    double ETA0;
    double ETA0N1;
    double ETA0N2;
    double TETA0;
    double ETA0R;
    double TETA0R;
    double DSUB;
    double DVTP0;
    double DVTP1;
    double K1RSCE;
    double LPE0;
    double DVTSHIFT;
    double K0;
    double K01;
    double K0SI;
    double K0SI1;
    double K1SI;
    double K1SI1;
    double PHIBE;
    double K1;
    double K11;
    double K1SAT;
    double K1SAT1;
    double QMFACTOR;
    double QMTCENIV;
    double QMTCENCV;
    double QMTCENCVA;
    double AQMTCEN;
    double BQMTCEN;
    double ETAQM;
    double QM0;
    double PQM;
    double QM0ACC;
    double PQMACC;
    double VSAT;
    double VSATN1;
    double VSATN2;
    double AVSAT;
    double BVSAT;
    double VSAT1;
    double VSAT1N1;
    double VSAT1N2;
    double VSAT1R;
    double VSAT1RN1;
    double VSAT1RN2;
    double AVSAT1;
    double BVSAT1;
    double DELTAVSAT;
    double PSAT;
    double APSAT;
    double BPSAT;
    double KSATIV;
    double VSATCV;
    double AVSATCV;
    double BVSATCV;
    double DELTAVSATCV;
    double PSATCV;
    double APSATCV;
    double BPSATCV;
    double MEXP;
    double AMEXP;
    double BMEXP;
    double MEXPR;
    double AMEXPR;
    double BMEXPR;
    double PTWG;
    double PTWGR;
    double APTWG;
    double BPTWG;
    double AT;
    double TMEXP;
    double TMEXPR;
    double PTWGT;
    double U0;
    double U0N1;
    double U0N2;
    double ETAMOB;
    double UP;
    double LPA;
    double UA;
    double AUA;
    double BUA;
    double UC;
    double EU;
    double AEU;
    double BEU;
    double UD;
    double AUD;
    double BUD;
    double UCS;
    double UTE;
    double UTL;
    double EMOBT;
    double UA1;
    double UC1;
    double UD1;
    double UCSTE;
    double CHARGEWF;
    double RDSWMIN;
    double RDSW;
    double ARDSW;
    double BRDSW;
    double RSWMIN;
    double RSW;
    double ARSW;
    double BRSW;
    double RDWMIN;
    double RDW;
    double ARDW;
    double BRDW;
    double RSDR;
    double RSDRR;
    double RDDR;
    double RDDRR;
    double PRSDR;
    double PRDDR;
    double PRWGS;
    double PRWGD;
    double WR;
    double PRT;
    double TRSDR;
    double TRDDR;
    double PDIBL1;
    double PDIBL1R;
    double PDIBL2;
    double DROUT;
    double PVAG;
    double PCLM;
    double APCLM;
    double BPCLM;
    double PCLMG;
    double PCLMCV;
    double A1;
    double A11;
    double A2;
    double A21;
    double RGEXT;
    double RGFIN;
    double RSHS;
    double RSHD;
    double HEPI;
    double TSILI;
    double RHOC;
    double RHORSD;
    double CRATIO;
    double DELTAPRSD;
    int SDTERM;
    double LSP;
    double EPSRSP;
    double TGATE;
    double TMASK;
    double ASILIEND;
    double ARSDEND;
    double PRSDEND;
    double NSDE;
    double RGEOA;
    double RGEOB;
    double RGEOC;
    double RGEOD;
    double RGEOE;
    double CGEOA;
    double CGEOB;
    double CGEOC;
    double CGEOD;
    double CGEOE;
    double AIGBINV;
    double AIGBINV1;
    double BIGBINV;
    double CIGBINV;
    double EIGBINV;
    double NIGBINV;
    double AIGBACC;
    double AIGBACC1;
    double BIGBACC;
    double CIGBACC;
    double NIGBACC;
    double AIGC;
    double AIGC1;
    double BIGC;
    double CIGC;
    double PIGCD;
    double DLCIGS;
    double AIGS;
    double AIGS1;
    double BIGS;
    double CIGS;
    double DLCIGD;
    double AIGD;
    double AIGD1;
    double BIGD;
    double CIGD;
    double TOXREF;
    double TOXG;
    double NTOX;
    double POXEDGE;
    double AGISL;
    double BGISL;
    double CGISL;
    double EGISL;
    double PGISL;
    double AGIDL;
    double BGIDL;
    double CGIDL;
    double EGIDL;
    double PGIDL;
    double ALPHA0;
    double ALPHA01;
    double ALPHA1;
    double ALPHA11;
    double BETA0;
    double ALPHAII0;
    double ALPHAII01;
    double ALPHAII1;
    double ALPHAII11;
    double BETAII0;
    double BETAII1;
    double BETAII2;
    double ESATII;
    double LII;
    double SII0;
    double SII1;
    double SII2;
    double SIID;
    double EOTACC;
    double DELVFBACC;
    double CFS;
    double CFD;
    double CGSO;
    double CGDO;
    double CGSL;
    double CGDL;
    double CKAPPAS;
    double CKAPPAD;
    double CGBO;
    double CGBN;
    double CGBL;
    double CKAPPAB;
    double CSDESW;
    double CJS;
    double CJD;
    double CJSWS;
    double CJSWD;
    double CJSWGS;
    double CJSWGD;
    double PBS;
    double PBD;
    double PBSWS;
    double PBSWD;
    double PBSWGS;
    double PBSWGD;
    double MJS;
    double MJD;
    double MJSWS;
    double MJSWD;
    double MJSWGS;
    double MJSWGD;
    double SJS;
    double SJD;
    double SJSWS;
    double SJSWD;
    double SJSWGS;
    double SJSWGD;
    double MJS2;
    double MJD2;
    double MJSWS2;
    double MJSWD2;
    double MJSWGS2;
    double MJSWGD2;
    double JSS;
    double JSD;
    double JSWS;
    double JSWD;
    double JSWGS;
    double JSWGD;
    double NJS;
    double NJD;
    double IJTHSFWD;
    double IJTHDFWD;
    double IJTHSREV;
    double IJTHDREV;
    double BVS;
    double BVD;
    double XJBVS;
    double XJBVD;
    double JTSS;
    double JTSD;
    double JTSSWS;
    double JTSSWD;
    double JTSSWGS;
    double JTSSWGD;
    double JTWEFF;
    double NJTS;
    double NJTSD;
    double NJTSSW;
    double NJTSSWD;
    double NJTSSWG;
    double NJTSSWGD;
    double VTSS;
    double VTSD;
    double VTSSWS;
    double VTSSWD;
    double VTSSWGS;
    double VTSSWGD;
    double LINTIGEN;
    double NTGEN;
    double AIGEN;
    double BIGEN;
    double XRCRG1;
    double XRCRG2;
    int NSEG;
    double EF;
    double EM;
    double NOIA;
    double NOIB;
    double NOIC;
    double NTNOI;
    double TNOM;
    double TBGASUB;
    double TBGBSUB;
    double KT1;
    double KT1L;
    double TSS;
    double IIT;
    double TII;
    double TGIDL;
    double IGT;
    double TCJ;
    double TCJSW;
    double TCJSWG;
    double TPB;
    double TPBSW;
    double TPBSWG;
    double XTIS;
    double XTID;
    double XTSS;
    double XTSD;
    double XTSSWS;
    double XTSSWD;
    double XTSSWGS;
    double XTSSWGD;
    double TNJTS;
    double TNJTSD;
    double TNJTSSW;
    double TNJTSSWD;
    double TNJTSSWG;
    double TNJTSSWGD;
    double RTH0;
    double CTH0;
    double WTH0;
    double LMIN;
    double LMAX;
    double NFINMIN;
    double NFINMAX;
    double LNBODY;
    double NNBODY;
    double PNBODY;
    double LPHIG;
    double NPHIG;
    double PPHIG;
    double LNGATE;
    double NNGATE;
    double PNGATE;
    double LCIT;
    double NCIT;
    double PCIT;
    double LCDSC;
    double NCDSC;
    double PCDSC;
    double LCDSCD;
    double NCDSCD;
    double PCDSCD;
    double LCDSCDR;
    double NCDSCDR;
    double PCDSCDR;
    double LDVT0;
    double NDVT0;
    double PDVT0;
    double LDVT1;
    double NDVT1;
    double PDVT1;
    double LDVT1SS;
    double NDVT1SS;
    double PDVT1SS;
    double LPHIN;
    double NPHIN;
    double PPHIN;
    double LETA0;
    double NETA0;
    double PETA0;
    double LETA0R;
    double NETA0R;
    double PETA0R;
    double LDSUB;
    double NDSUB;
    double PDSUB;
    double LK1RSCE;
    double NK1RSCE;
    double PK1RSCE;
    double LLPE0;
    double NLPE0;
    double PLPE0;
    double LDVTSHIFT;
    double NDVTSHIFT;
    double PDVTSHIFT;
    double LPHIBE;
    double NPHIBE;
    double PPHIBE;
    double LK0;
    double NK0;
    double PK0;
    double LK01;
    double NK01;
    double PK01;
    double LK0SI;
    double NK0SI;
    double PK0SI;
    double LK0SI1;
    double NK0SI1;
    double PK0SI1;
    double LK1SI;
    double NK1SI;
    double PK1SI;
    double LK1SI1;
    double NK1SI1;
    double PK1SI1;
    double LK1;
    double NK1;
    double PK1;
    double LK11;
    double NK11;
    double PK11;
    double LK1SAT;
    double NK1SAT;
    double PK1SAT;
    double LK1SAT1;
    double NK1SAT1;
    double PK1SAT1;
    double LDVTB;
    double NDVTB;
    double PDVTB;
    double LLPEB;
    double NLPEB;
    double PLPEB;
    double LQMFACTOR;
    double NQMFACTOR;
    double PQMFACTOR;
    double LQMTCENIV;
    double NQMTCENIV;
    double PQMTCENIV;
    double LQMTCENCV;
    double NQMTCENCV;
    double PQMTCENCV;
    double LQMTCENCVA;
    double NQMTCENCVA;
    double PQMTCENCVA;
    double LVSAT;
    double NVSAT;
    double PVSAT;
    double LVSAT1;
    double NVSAT1;
    double PVSAT1;
    double LVSAT1R;
    double NVSAT1R;
    double PVSAT1R;
    double LPSAT;
    double NPSAT;
    double PPSAT;
    double LDELTAVSAT;
    double NDELTAVSAT;
    double PDELTAVSAT;
    double LKSATIV;
    double NKSATIV;
    double PKSATIV;
    double LVSATCV;
    double NVSATCV;
    double PVSATCV;
    double LPSATCV;
    double NPSATCV;
    double PPSATCV;
    double LDELTAVSATCV;
    double NDELTAVSATCV;
    double PDELTAVSATCV;
    double LMEXP;
    double NMEXP;
    double PMEXP;
    double LMEXPR;
    double NMEXPR;
    double PMEXPR;
    double LPTWG;
    double NPTWG;
    double PPTWG;
    double LPTWGR;
    double NPTWGR;
    double PPTWGR;
    double LU0;
    double NU0;
    double PU0;
    double LETAMOB;
    double NETAMOB;
    double PETAMOB;
    double LUP;
    double NUP;
    double PUP;
    double LUA;
    double NUA;
    double PUA;
    double LUC;
    double NUC;
    double PUC;
    double LEU;
    double NEU;
    double PEU;
    double LUD;
    double NUD;
    double PUD;
    double LUCS;
    double NUCS;
    double PUCS;
    double LPCLM;
    double NPCLM;
    double PPCLM;
    double LPCLMG;
    double NPCLMG;
    double PPCLMG;
    double LPCLMCV;
    double NPCLMCV;
    double PPCLMCV;
    double LA1;
    double NA1;
    double PA1;
    double LA11;
    double NA11;
    double PA11;
    double LA2;
    double NA2;
    double PA2;
    double LA21;
    double NA21;
    double PA21;
    double LRDSW;
    double NRDSW;
    double PRDSW;
    double LRSW;
    double NRSW;
    double PRSW;
    double LRDW;
    double NRDW;
    double PRDW;
    double LPRWGS;
    double NPRWGS;
    double PPRWGS;
    double LPRWGD;
    double NPRWGD;
    double PPRWGD;
    double LWR;
    double NWR;
    double PWR;
    double LPDIBL1;
    double NPDIBL1;
    double PPDIBL1;
    double LPDIBL1R;
    double NPDIBL1R;
    double PPDIBL1R;
    double LPDIBL2;
    double NPDIBL2;
    double PPDIBL2;
    double LDROUT;
    double NDROUT;
    double PDROUT;
    double LPVAG;
    double NPVAG;
    double PPVAG;
    double LAIGBINV;
    double NAIGBINV;
    double PAIGBINV;
    double LAIGBINV1;
    double NAIGBINV1;
    double PAIGBINV1;
    double LBIGBINV;
    double NBIGBINV;
    double PBIGBINV;
    double LCIGBINV;
    double NCIGBINV;
    double PCIGBINV;
    double LEIGBINV;
    double NEIGBINV;
    double PEIGBINV;
    double LNIGBINV;
    double NNIGBINV;
    double PNIGBINV;
    double LAIGBACC;
    double NAIGBACC;
    double PAIGBACC;
    double LAIGBACC1;
    double NAIGBACC1;
    double PAIGBACC1;
    double LBIGBACC;
    double NBIGBACC;
    double PBIGBACC;
    double LCIGBACC;
    double NCIGBACC;
    double PCIGBACC;
    double LNIGBACC;
    double NNIGBACC;
    double PNIGBACC;
    double LAIGC;
    double NAIGC;
    double PAIGC;
    double LAIGC1;
    double NAIGC1;
    double PAIGC1;
    double LBIGC;
    double NBIGC;
    double PBIGC;
    double LCIGC;
    double NCIGC;
    double PCIGC;
    double LPIGCD;
    double NPIGCD;
    double PPIGCD;
    double LAIGS;
    double NAIGS;
    double PAIGS;
    double LAIGS1;
    double NAIGS1;
    double PAIGS1;
    double LBIGS;
    double NBIGS;
    double PBIGS;
    double LCIGS;
    double NCIGS;
    double PCIGS;
    double LAIGD;
    double NAIGD;
    double PAIGD;
    double LAIGD1;
    double NAIGD1;
    double PAIGD1;
    double LBIGD;
    double NBIGD;
    double PBIGD;
    double LCIGD;
    double NCIGD;
    double PCIGD;
    double LNTOX;
    double NNTOX;
    double PNTOX;
    double LPOXEDGE;
    double NPOXEDGE;
    double PPOXEDGE;
    double LAGISL;
    double NAGISL;
    double PAGISL;
    double LBGISL;
    double NBGISL;
    double PBGISL;
    double LCGISL;
    double NCGISL;
    double PCGISL;
    double LEGISL;
    double NEGISL;
    double PEGISL;
    double LPGISL;
    double NPGISL;
    double PPGISL;
    double LAGIDL;
    double NAGIDL;
    double PAGIDL;
    double LBGIDL;
    double NBGIDL;
    double PBGIDL;
    double LCGIDL;
    double NCGIDL;
    double PCGIDL;
    double LEGIDL;
    double NEGIDL;
    double PEGIDL;
    double LPGIDL;
    double NPGIDL;
    double PPGIDL;
    double LALPHA0;
    double NALPHA0;
    double PALPHA0;
    double LALPHA1;
    double NALPHA1;
    double PALPHA1;
    double LALPHAII0;
    double NALPHAII0;
    double PALPHAII0;
    double LALPHAII1;
    double NALPHAII1;
    double PALPHAII1;
    double LBETA0;
    double NBETA0;
    double PBETA0;
    double LBETAII0;
    double NBETAII0;
    double PBETAII0;
    double LBETAII1;
    double NBETAII1;
    double PBETAII1;
    double LBETAII2;
    double NBETAII2;
    double PBETAII2;
    double LESATII;
    double NESATII;
    double PESATII;
    double LLII;
    double NLII;
    double PLII;
    double LSII0;
    double NSII0;
    double PSII0;
    double LSII1;
    double NSII1;
    double PSII1;
    double LSII2;
    double NSII2;
    double PSII2;
    double LSIID;
    double NSIID;
    double PSIID;
    double LCFS;
    double NCFS;
    double PCFS;
    double LCFD;
    double NCFD;
    double PCFD;
    double LCOVS;
    double NCOVS;
    double PCOVS;
    double LCOVD;
    double NCOVD;
    double PCOVD;
    double LCGSL;
    double NCGSL;
    double PCGSL;
    double LCGDL;
    double NCGDL;
    double PCGDL;
    double LCKAPPAS;
    double NCKAPPAS;
    double PCKAPPAS;
    double LCKAPPAD;
    double NCKAPPAD;
    double PCKAPPAD;
    double LCGBL;
    double NCGBL;
    double PCGBL;
    double LCKAPPAB;
    double NCKAPPAB;
    double PCKAPPAB;
    double LNTGEN;
    double NNTGEN;
    double PNTGEN;
    double LAIGEN;
    double NAIGEN;
    double PAIGEN;
    double LBIGEN;
    double NBIGEN;
    double PBIGEN;
    double LXRCRG1;
    double NXRCRG1;
    double PXRCRG1;
    double LXRCRG2;
    double NXRCRG2;
    double PXRCRG2;
    double LINTNOI;
    double LUTE;
    double NUTE;
    double PUTE;
    double LUTL;
    double NUTL;
    double PUTL;
    double LEMOBT;
    double NEMOBT;
    double PEMOBT;
    double LUA1;
    double NUA1;
    double PUA1;
    double LUC1;
    double NUC1;
    double PUC1;
    double LUD1;
    double NUD1;
    double PUD1;
    double LUCSTE;
    double NUCSTE;
    double PUCSTE;
    double LPTWGT;
    double NPTWGT;
    double PPTWGT;
    double LAT;
    double NAT;
    double PAT;
    double LSTTHETASAT;
    double NSTTHETASAT;
    double PSTTHETASAT;
    double LPRT;
    double NPRT;
    double PPRT;
    double LKT1;
    double NKT1;
    double PKT1;
    double LTSS;
    double NTSS;
    double PTSS;
    double LIIT;
    double NIIT;
    double PIIT;
    double LTII;
    double NTII;
    double PTII;
    double LTGIDL;
    double NTGIDL;
    double PTGIDL;
    double LIGT;
    double NIGT;
    double PIGT;
    //  Variables of global_model scope
    // end verilog model variables=====
};

void registerDevice(const DeviceCountMap& deviceMap = DeviceCountMap(),
                    const std::set<int>& levelSet = std::set<int>());

} // namespace ADMSbsimcmg
} // namespace Device
} // namespace Xyce
#endif //Xyce_N_DEV_ADMSbsimcmg_h
